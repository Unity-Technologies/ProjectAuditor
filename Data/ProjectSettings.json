{
    "Items": [
        {
            "id": "PAS0000",
            "title": "Player: Metal API Validation",
            "type": "UnityEditor.PlayerSettings",
            "method": "enableMetalAPIValidation",
            "value": "True",
            "areas": ["CPU"],
            "platforms": ["iOS", "StandaloneOSX", "tvOS"],
            "description": "The <b>Metal API Validation</b> option is enabled in the iOS Player Settings.",
            "solution": "We recommend disabling it. This option will only affect builds running from Xcode, but it rarely highlights anything that the user will have control over.",
            "minimumVersion": "2018.1"
        },
        {
            "id": "PAS0001",
            "title": "Player: Graphics Jobs",
            "type": "UnityEditor.PlayerSettings",
            "method": "graphicsJobs",
            "value": "False",
            "areas": ["CPU"],
            "description": "The <b>Graphics Jobs</b> option in Player Settings is disabled.",
            "solution": "Try enabling it and testing your application. This option spreads the task of building the render command buffer every frame across as many CPU cores as possible, rather than performing all the work in the render thread which is often a bottleneck. Performance will vary depending on the project.\n\nNote: This feature is experimental on specific Unity versions and may introduce new crashes. It is recommended to test accordingly."
        },
        {
            "id": "PAS0007",
            "title": "Player: Prebake Collision Meshes",
            "type": "UnityEditor.PlayerSettings",
            "method": "bakeCollisionMeshes",
            "value": "False",
            "areas": ["BuildSize","LoadTime"],
            "description": "The <b>Prebake Collision Meshes</b> option in Player Settings is disabled.",
            "solution": "If you are using physics in your application, consider enabling this option. Prebaked collision meshes can result in an increase in build times and sizes, but reduce loading/initialization times in your application, because serializing prebaked meshes is faster than baking them at runtime."
        },
        {
            "id": "PAS0008",
            "title": "Player: Optimize Mesh Data",
            "type": "UnityEditor.PlayerSettings",
            "method": "stripUnusedMeshComponents",
            "value": "False",
            "areas": ["BuildSize","LoadTime","GPU"],
            "description": "The <b>Optimize Mesh Data</b> option in Player Settings is disabled.",
            "solution": "Consider enabling it. This option strips out vertex channels on meshes which are not used by the materials which are applied to them. This can reduce the file size of your meshes and the time to load them, and increase GPU rendering performance. It can, however, cause problems if mesh materials are changed at runtime, since the new materials might rely on vertex channels which have been removed, and it may contribute to longer build times."
        },
        {
            "id": "PAS0010",
            "title": "Player (WebGL): Data Caching",
            "type": "UnityEditor.PlayerSettings+WebGL",
            "method": "dataCaching",
            "value": "False",
            "areas": ["LoadTime"],
            "platforms": ["WebGL"],
            "description": "Build file needs to be downloaded every time the content is loaded.",
            "solution": "Enable <b>dataCaching</b> to cache build files in Browser cache"
        },
        {
            "id": "PAS0011",
            "title": "Player (WebGL): Linker Target",
            "type": "UnityEditor.PlayerSettings+WebGL",
            "method": "linkerTarget",
            "value": "Asm",
            "areas": ["CPU","Memory"],
            "platforms": ["WebGL"],
            "description": "WebGLLinkerTarget.Asm is deprecated.",
            "solution": "Set <b>UnityEditor.PlayerSettings.WebGL.linkerTarget</b> to <b>WebGLLinkerTarget.Wasm</b> to generate code in WebAssembly format.",
            "minimumVersion": "2018.1"
        },
        {
            "id": "PAS0012",
            "title": "Physics: Auto Sync Transforms",
            "type": "UnityEngine.Physics",
            "method": "autoSyncTransforms",
            "value": "True",
            "areas": ["CPU"],
            "description": "In Physics Settings, <b>Auto Sync Transforms</b> is enabled. This option ensures backwards compatibility with the behaviour of older versions of Unity in which physics transforms were always kept in sync with GameObject transforms. In newer versions of Unity, transform syncs are batched for greater efficiency on the CPU. Enabling this option means that transforms are always synced before physics queries (e.g. Physics.Raycast()); before reading data back from the physics engine (e.g. Rigidbody.position); before simulating particles that compute collisions, and before updating the camera flares effect. This adds an additional CPU cost.",
            "solution": "Consider disabling <b>Auto Sync Transforms</b> and testing your game to identify any areas where physics behavior is affected by the change. If there are areas of the game where more frequent synchronization is required to maintain the desired behaviour, this can be enforced by calling Physics.SyncTransforms() directly."
        },
        {
            "id": "PAS0014",
            "title": "Physics2D: Auto Sync Transforms",
            "type": "UnityEngine.Physics2D",
            "method": "autoSyncTransforms",
            "value": "True",
            "areas": ["CPU"],
            "description": "In Physics 2D Settings, <b>Auto Sync Transforms</b> is enabled. This option ensures backwards compatibility with the behaviour of older versions of Unity in which physics transforms were always kept in sync with GameObject transforms. In newer versions of Unity, transform syncs are batched for greater efficiency on the CPU. Enabling this option means that transforms are always synced before physics queries (e.g. Physics2D.Raycast()); before reading data back from the physics engine (e.g. Rigidbody2D.position); before simulating particles that compute collisions, and before updating the camera flares effect. This adds an additional CPU cost.",
            "solution": "Consider disabling <b>Auto Sync Transforms</b> and testing your game to identify any areas where physics behavior is affected by the change. If there are areas of the game where more frequent synchronization is required to maintain the desired behaviour, this can be enforced by calling Physics2D.SyncTransforms() directly."
        },
        {
            "id": "PAS0027",
            "title": "Player: Mipmap Stripping",
            "type": "UnityEditor.PlayerSettings",
            "method": "mipStripping",
            "value": "False",
            "areas": ["BuildSize"],
            "description": "The <b>Texture MipMap Stripping</b> option in Player Settings is disabled. The generated build might be larger than necessary. ",
            "solution": "Enable <b>Texture MipMap Stripping</b>. Note that this feature will only reduce the build size if no quality levels on the platform use highest mip(s). Furthermore, if code drives the <b>masterTextureLevel</b> to a value higher than those in the quality level settings the mip will no longer be available if this is enabled.",
            "minimumVersion": "2020.2"
        },
        {
            "id": "PAS0028",
            "title": "Physics: Reuse Collision Callbacks",
            "type": "UnityEngine.Physics",
            "method": "reuseCollisionCallbacks",
            "value": "False",
            "areas": ["Memory"],
            "description": "The <b>Reuse Collision Callbacks</b> option in Physics Settings is disabled. For each OnCollision* callback, a temporary managed object is allocated which, eventually, will need to be garbage collected.",
            "solution": "When this option is enabled, only a single instance of the Collision type is created and reused for each individual callback. This reduces waste for the garbage collector to handle and improves performance.",
            "minimumVersion": "2018.3"
        },
        {
            "id": "PAS0030",
            "title": "Player (Android): Optimized Frame Pacing",
            "type": "UnityEditor.PlayerSettings+Android",
            "method": "optimizedFramePacing",
            "value": "False",
            "areas": [ "CPU" ],
            "platforms": ["Android"],
            "description": "<b>Optimized Frame Pacing</b> is <b>disabled</b>, which can lead to suboptimal performance. Android Frame Pacing syncs your rendering loop to the underlying display hardware, reducing stuttering and latency so that gameplay looks and feels smooth.",
            "solution": "To enable this feature, choose <b>Project Settings ➔ Player ➔ Settings for Android ➔ Resolution and Presentation</b>, and select the <b>Optimized Frame Pacing</b> checkbox.",
            "documentationUrl" : "https://docs.unity3d.com/ScriptReference/PlayerSettings.Android-optimizedFramePacing.html",
            "minimumVersion": "2019.2"
        },
        {
            "id": "PAS0034",
            "title": "Player: Use incremental GC disabled",
            "type": "UnityEditor.PlayerSettings",
            "method": "gcIncremental",
            "value": "False",
            "areas": ["CPU"],
            "description": "The Incremental Garbage Collection feature is disabled. This might lead to CPU spikes due to Garbage Collection.",
            "solution": "To enable this feature, enable option <b>Project Settings ➔ Player ➔ Other Settings ➔ Configuration ➔ Use incremental GC</b>. Note this is not a substitute for reducing per-frame managed allocations.",
            "minimumVersion": "2019.1"
        }
    ]
}
