// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.ProjectAuditor.Editor.Tests.Common
{
    public class TestAsset
    {
        public readonly string RelativePath;
        public static readonly string TempAssetsFolder;
        public string FileName { get; }
        public TestAsset(string fileName, byte[] byteContent) {}
        public TestAsset(string fileName, string content) {}
        public static void Cleanup();
        public void CleanupLocal();
        public static void CreateTempFolder();
        public static TestAsset Save(UnityEngine.Object asset, string fileName);
        public static TestAsset SaveSpriteAtlasAsset(UnityEditor.U2D.SpriteAtlasAsset asset, string fileName);
    }

    public abstract class TestFixtureBase
    {
        protected System.Collections.Generic.List<Rule> m_AdditionalRules;
        protected AnalysisParams m_AnalysisParams;
        protected string m_AssemblyName;
        protected string m_BuildPath;
        protected CodeOptimization m_CodeOptimization = CodeOptimization.Release;
        protected UnityEditor.AndroidArchitecture m_OriginalTargetArchitecture;
        protected UnityEditor.BuildTarget m_Platform;
        protected ProjectAuditor m_ProjectAuditor;
        protected ReportItem[] m_ReportItems;
        protected string m_SavedCompanyName;
        protected string m_SavedProductName;
        protected TestFixtureBase() {}
        protected ReportItem[] Analyze(System.Func<ReportItem, bool> predicate = default(System.Func<ReportItem, bool>));
        protected ReportItem[] Analyze(IssueCategory category, System.Func<ReportItem, bool> predicate = default(System.Func<ReportItem, bool>));
        protected ReportItem[] AnalyzeAndFindAssetIssues(TestAsset testAsset, IssueCategory category = IssueCategory.Code);
        protected ReportItem[] AnalyzeBuild(System.Func<ReportItem, bool> predicate = default(System.Func<ReportItem, bool>), bool isDevelopment = true, string buildFileName = @"test", System.Action preBuildAction = default(System.Action), System.Action postBuildAction = default(System.Action));
        protected ReportItem[] AnalyzeBuild(IssueCategory category, System.Func<ReportItem, bool> predicate = default(System.Func<ReportItem, bool>), bool isDevelopment = true, string buildFileName = @"test", System.Action preBuildAction = default(System.Action), System.Action postBuildAction = default(System.Action));
        protected ReportItem[] AnalyzeFiltered(System.Predicate<string> filterPredicate);
        protected ReportItem[] AnalyzeFiltered(System.Predicate<string> filterPredicate, IssueCategory category);
        protected ReportItem[] AnalyzeFiltered(System.Predicate<string> filterPredicate, IssueCategory[] categories);
        protected void AnalyzeTestAssets();
        protected void Build(bool isDevelopment = true, string buildFileName = @"test", System.Action preBuildAction = default(System.Action), System.Action postBuildAction = default(System.Action));
        [NUnit.Framework.OneTimeTearDown] public void Cleanup();
        protected void CleanupBuild();
        public static UnityEditor.BuildTarget GetDefaultBuildTarget();
        protected ReportItem[] GetIssues();
        protected ReportItem[] GetIssuesForAsset(TestAsset testAsset);
        protected void ValidateTargetPlatform();
    }
}
