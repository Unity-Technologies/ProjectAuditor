// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.ProjectAuditor.Editor
{
    public enum IssueCategory
    {
        Assembly = 11,
        AssetDiagnostic = 1,
        AudioClip = 17,
        BuildFile = 8,
        BuildStep = 9,
        BuildSummary = 10,
        Code = 4,
        CodeCompilerMessage = 5,
        ComputeShaderVariant = 18,
        FirstCustomCategory = 21,
        GenericInstance = 6,
        Mesh = 19,
        MetaData = 0,
        Package = 14,
        PackageDiagnostic = 15,
        PrecompiledAssembly = 12,
        ProjectSetting = 7,
        Shader = 2,
        ShaderCompilerMessage = 13,
        ShaderVariant = 3,
        SpriteAtlas = 20,
        Texture = 16,
    }

    public class Location
    {
        public string Extension { get; }
        public string Filename { get; }
        public string FormattedFilename { get; }
        public string FormattedPath { get; }
        public int Line { get; }
        public string Path { get; }
        public Location(string path) {}
        public Location(string path, int line) {}
        public bool IsValid();
    }

    public sealed class ProjectAuditor : UnityEditor.Build.IOrderedCallback, UnityEditor.Build.IPreprocessBuildWithReport
    {
        public int callbackOrder { get; }
        public ProjectAuditor() {}
        public ProjectAuditor(string assetPath) {}
        public ProjectAuditor(ProjectAuditorConfig projectAuditorConfig) {}
        public void OnPreprocessBuild(UnityEditor.Build.Reporting.BuildReport report);
    }

    public class ProjectAuditorConfig : UnityEngine.ScriptableObject
    {
        public ProjectAuditorConfig() {}
    }

    [UnityEngine.CreateAssetMenu(menuName = @"Project Auditor/Project Auditor Settings")] public class ProjectAuditorSettings : UnityEngine.ScriptableObject
    {
        public ProjectAuditorSettings() {}
    }

    public class ProjectAuditorSettingsProvider
    {
        public ProjectAuditorSettingsProvider() {}
        public ProjectAuditorSettings GetCurrentSettings();
        public System.Collections.Generic.IEnumerable<ProjectAuditorSettings> GetSettings();
        public void Initialize();
        public void SelectCurrentSettings(ProjectAuditorSettings settings);
    }

    public class ProjectIssue
    {
        public int depth = 0;
        public bool wasFixed = false;
        public IssueCategory category { get; }
        public string[] customProperties { get; }
        public string description { get; }
        public Diagnostic.Descriptor descriptor { get; }
        public string filename { get; }
        public int line { get; }
        public Location location { get; set; }
        public Core.LogLevel logLevel { get; }
        public string relativePath { get; }
        public Diagnostic.Severity severity { get; set; }
        public string GetCustomProperty<T>(T propertyEnum) where T : struct, new();
        public bool GetCustomPropertyBool<T>(T propertyEnum) where T : struct, new();
        public double GetCustomPropertyDouble<T>(T propertyEnum) where T : struct, new();
        public float GetCustomPropertyFloat<T>(T propertyEnum) where T : struct, new();
        public int GetCustomPropertyInt32<T>(T propertyEnum) where T : struct, new();
        public long GetCustomPropertyInt64<T>(T propertyEnum) where T : struct, new();
        public System.UInt64 GetCustomPropertyUInt64<T>(T propertyEnum) where T : struct, new();
        public int GetNumCustomProperties();
        public bool IsDiagnostic();
        public bool IsMajorOrCritical();
        public bool IsValid();
        public void SetCustomProperty<T>(T propertyEnum, object property) where T : struct, new();
    }
}

namespace Unity.ProjectAuditor.Editor.AssemblyUtils
{
    public enum CodeOptimization
    {
        Debug = 0,
        Release = 1,
    }
}

namespace Unity.ProjectAuditor.Editor.Core
{
    public enum LogLevel
    {
        Error = 0,
        Info = 2,
        Warning = 1,
    }
}

namespace Unity.ProjectAuditor.Editor.Diagnostic
{
    public enum Area
    {
        BuildSize = 3,
        BuildTime = 4,
        CPU = 0,
        GPU = 1,
        LoadTime = 5,
        Memory = 2,
        Quality = 6,
        Requirement = 8,
        Support = 7,
    }

    public sealed class Descriptor : System.IEquatable<Descriptor>
    {
        public string[] areas;
        public Severity defaultSeverity = Severity.Moderate|Severity.Warning;
        public string description;
        public string documentationUrl;
        public System.Action<ProjectIssue> fixer;
        public string id;
        public string maximumVersion;
        public string messageFormat = @"{0}";
        public string method;
        public string minimumVersion;
        public string[] platforms;
        public string solution;
        public string title;
        public string type;
        public string value;
        public Descriptor(string id, string title, string[] areas, string description, string solution) {}
        public Descriptor(string id, string title, Area area, string description, string solution) {}
        public Descriptor(string id, string title, Area[] areas, string description, string solution) {}
        public override bool Equals(object obj);
        public bool Equals(Descriptor other);
        public override int GetHashCode();
        public bool IsValid();
    }

    public enum Severity
    {
        Critical = 2,
        Default = 0,
        Error = 1,
        Hidden = 7,
        Info = 5,
        Major = 3,
        Minor = 5,
        Moderate = 4,
        None = 6,
        Warning = 4,
    }
}
