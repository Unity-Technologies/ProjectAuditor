// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
public class FindTheTextures : UnityEngine.MonoBehaviour
{
    public static string[] searchTheseFolders;
    public FindTheTextures() {}
    public static void TextureSearchAndReport();
}

namespace Unity.ProjectAuditor.Editor
{
    public enum Area
    {
        BuildSize = 3,
        BuildTime = 4,
        CPU = 0,
        GPU = 1,
        LoadTime = 5,
        Memory = 2,
    }

    public class AssetDependencyNode : DependencyNode
    {
        public AssetDependencyNode() {}
        public override string GetName();
        public override string GetPrettyName();
        public override bool IsPerfCritical();
    }

    public abstract class DependencyNode
    {
        public Utils.Location location;
        protected System.Collections.Generic.List<DependencyNode> m_Children;
        public bool perfCriticalContext;
        public string name { get; }
        public string prettyName { get; }
        protected DependencyNode() {}
        public void AddChild(DependencyNode child);
        public DependencyNode GetChild(int index = 0);
        public abstract string GetName();
        public int GetNumChildren();
        public abstract string GetPrettyName();
        public bool HasChildren();
        public bool HasValidChildren();
        public abstract bool IsPerfCritical();
        public void SortChildren();
    }

    public interface IProgress
    {
        public void Advance(string description = @"");
        public void Clear();
        public void Start(string title, string description, int total);
    }

    public interface IProjectIssueFilter
    {
        public bool Match(ProjectIssue issue);
    }

    public enum IssueCategory
    {
        Assembly = 11,
        Asset = 1,
        BuildFile = 8,
        BuildStep = 9,
        BuildSummary = 10,
        Code = 4,
        CodeCompilerMessage = 5,
        FirstCustomCategory = 15,
        GenericInstance = 6,
        MetaData = 0,
        PrecompiledAssembly = 12,
        ProjectSetting = 7,
        Shader = 2,
        ShaderCompilerMessage = 13,
        ShaderVariant = 3,
        Texture = 14,
    }

    public class IssueLayout
    {
        public IssueCategory category;
        public bool hierarchy;
        public PropertyDefinition[] properties;
        public int defaultGroupPropertyIndex { get; }
        public IssueLayout() {}
    }

    public sealed class ProblemDescriptor : System.IEquatable<ProblemDescriptor>
    {
        public string[] areas;
        public bool critical = false;
        public string customevaluator;
        public string description;
        public string id;
        public string maximumVersion;
        public string messageFormat = @"{0}";
        public string method;
        public string minimumVersion;
        public string[] platforms;
        public string problem;
        public Rule.Severity severity;
        public string solution;
        public string type;
        public string value;
        public ProblemDescriptor(string id, string description, Area area, string problem = default(string), string solution = default(string)) {}
        public ProblemDescriptor(string id, string description, Area[] areas, string problem = default(string), string solution = default(string)) {}
        public override bool Equals(object obj);
        public bool Equals(ProblemDescriptor other);
        public override int GetHashCode();
    }

    public static class ProblemDescriptorExtensions
    {
        public static Area[] GetAreas(this ProblemDescriptor descriptor);
        public static string GetAreasSummary(this ProblemDescriptor descriptor);
        public static string GetFullTypeName(this ProblemDescriptor descriptor);
        public static bool IsPlatformCompatible(this ProblemDescriptor descriptor, UnityEditor.BuildTarget buildTarget);
    }

    public sealed class ProjectAuditor : UnityEditor.Build.IOrderedCallback, UnityEditor.Build.IPreprocessBuildWithReport
    {
        public int callbackOrder { get; }
        public ProjectAuditorConfig config { get; }
        public ProjectAuditor() {}
        public ProjectAuditor(string assetPath) {}
        public ProjectAuditor(ProjectAuditorConfig projectAuditorConfig) {}
        public ProjectReport Audit(IProgress progress = default(IProgress));
        public ProjectReport Audit(ProjectAuditorParams projectAuditorParams, IProgress progress = default(IProgress));
        public void AuditAsync(ProjectAuditorParams projectAuditorParams, IProgress progress = default(IProgress));
        public IssueCategory[] GetCategories();
        public IssueLayout GetLayout(IssueCategory category);
        public static IssueCategory GetOrRegisterCategory(string name);
        public static int NumCategories();
        public void OnPreprocessBuild(UnityEditor.Build.Reporting.BuildReport report);
    }

    public class ProjectAuditorConfig : UnityEngine.ScriptableObject
    {
        public bool AnalyzeInBackground = true;
        public bool AnalyzeOnBuild;
        public AssemblyUtils.CompilationMode CompilationMode;
        public bool FailBuildOnIssues;
        public bool SaveBuildReports;
        public bool UseRoslynAnalyzers;
        public int NumRules { get; }
        public ProjectAuditorConfig() {}
        public void AddRule(Rule ruleToAdd);
        public void ClearAllRules();
        public void ClearRules(ProblemDescriptor descriptor, string filter = @"");
        public Rule.Severity GetAction(ProblemDescriptor descriptor, string filter = @"");
        public Rule GetRule(ProblemDescriptor descriptor, string filter = @"");
    }

    public abstract class ProjectAuditorModule
    {
        protected ProjectAuditorModule() {}
        public abstract void Audit(ProjectAuditorParams projectAuditorParams, IProgress progress = default(IProgress));
        public IssueCategory[] GetCategories();
        public virtual System.Collections.Generic.IEnumerable<ProblemDescriptor> GetDescriptors();
        public abstract System.Collections.Generic.IEnumerable<IssueLayout> GetLayouts();
        public virtual void Initialize(ProjectAuditorConfig config);
        public virtual bool IsEnabledByDefault();
        public virtual bool IsSupported();
        public virtual void RegisterDescriptor(ProblemDescriptor descriptor);
    }

    public class ProjectAuditorParams
    {
        public string[] assemblyNames;
        public IssueCategory[] categories;
        public AssemblyUtils.CodeOptimization codeOptimization = AssemblyUtils.CodeOptimization.Release;
        public System.Action onComplete;
        public System.Action<ProjectIssue> onIssueFound;
        public System.Action<ProjectReport> onUpdate;
        public UnityEditor.BuildTarget platform;
        public ProjectAuditorParams() {}
        public ProjectAuditorParams(ProjectAuditorParams original) {}
    }

    public class ProjectIssue
    {
        public int depth;
        public IssueCategory category { get; }
        public string[] customProperties { get; }
        public DependencyNode dependencies { get; }
        public string description { get; }
        public ProblemDescriptor descriptor { get; }
        public string filename { get; }
        public bool isPerfCriticalContext { get; }
        public int line { get; }
        public Utils.Location location { get; }
        public string relativePath { get; }
        public Rule.Severity severity { get; }
        public static ProjectIssueBuilder Create(IssueCategory category, string description);
        public static ProjectIssueBuilder Create(IssueCategory category, ProblemDescriptor descriptor, params object[] args);
        public string GetCustomProperty<T>(T propertyEnum) where T : struct, new();
        public double GetCustomPropertyAsDouble<T>(T propertyEnum) where T : struct, new();
        public float GetCustomPropertyAsFloat<T>(T propertyEnum) where T : struct, new();
        public int GetNumCustomProperties();
        public void SetCustomProperty<T>(T propertyEnum, object property) where T : struct, new();
    }

    public class ProjectIssueBuilder
    {
        public static ProjectIssue op_Implicit(ProjectIssueBuilder builder);
        public ProjectIssueBuilder WithCustomProperties(object[] properties);
        public ProjectIssueBuilder WithCustomProperties(int numProperties, object property);
        public ProjectIssueBuilder WithDependencies(DependencyNode dependencies);
        public ProjectIssueBuilder WithDescription(string description);
        public ProjectIssueBuilder WithLocation(Utils.Location location);
        public ProjectIssueBuilder WithSeverity(Rule.Severity severity);
    }

    public static class ProjectIssueExtensions
    {
        public static string GetContext(this ProjectIssue issue);
        public static string GetProperty(this ProjectIssue issue, PropertyType propertyType);
        public static string GetPropertyGroup(this ProjectIssue issue, PropertyDefinition propertyDefinition);
    }

    public sealed class ProjectReport
    {
        public int NumTotalIssues { get; }
        public void ExportToCSV(string path, IssueLayout layout, System.Func<ProjectIssue, bool> predicate = default(System.Func<ProjectIssue, bool>));
        public System.Collections.Generic.IReadOnlyCollection<ProjectIssue> GetAllIssues();
        public System.Collections.Generic.IReadOnlyCollection<ProjectIssue> GetIssues(IssueCategory category);
        public int GetNumIssues(IssueCategory category);
        public static ProjectReport Load(string path);
        public void Save(string path);
    }

    public struct PropertyDefinition
    {
        public bool defaultGroup;
        public PropertyFormat format;
        public string longName;
        public string name;
        public PropertyType type;
    }

    public enum PropertyFormat
    {
        Bool = 1,
        Bytes = 3,
        Integer = 2,
        String = 0,
        Time = 4,
    }

    public enum PropertyType
    {
        Area = 3,
        CriticalContext = 8,
        Description = 0,
        Descriptor = 1,
        Directory = 5,
        Filename = 6,
        FileType = 7,
        Num = 9,
        Path = 4,
        Severity = 2,
    }

    public struct PropertyTypeUtil
    {
        public static PropertyType FromCustom<T>(T customPropEnum) where T : struct, new();
        public static bool IsCustom(PropertyType type);
        public static int ToCustomIndex(PropertyType type);
    }

    public class Rule : System.IEquatable<Rule>
    {
        public string filter;
        public string id;
        public Rule.Severity severity;
        public Rule() {}
        public override bool Equals(object obj);
        public bool Equals(Rule other);
        public override int GetHashCode();
        public static bool operator ==(Rule a, Rule b);
        public static bool operator !=(Rule a, Rule b);
        public enum Severity
        {
            Default = 0,
            Error = 1,
            Hidden = 5,
            Info = 3,
            None = 4,
            Warning = 2,
        }
    }

    public class UserPreferences
    {
        public static bool developerMode { get; set; }
        public static bool logTimingsInfo { get; set; }
        public UserPreferences() {}
    }
}

namespace Unity.ProjectAuditor.Editor.AssemblyUtils
{
    public enum CodeOptimization
    {
        Debug = 0,
        Release = 1,
    }

    public enum CompilationMode
    {
        DevelopmentPlayer = 1,
        Editor = 3,
        EditorPlayMode = 2,
        Player = 0,
    }
}

namespace Unity.ProjectAuditor.Editor.CodeAnalysis
{
    public class CallTreeNode : DependencyNode
    {
        public readonly string assemblyName;
        public readonly string methodName = @"(anonymous)";
        public readonly string typeName;
        public override string GetName();
        public override string GetPrettyName();
        public override bool IsPerfCritical();
    }
}

namespace Unity.ProjectAuditor.Editor.InstructionAnalyzers
{
    public interface IInstructionAnalyzer
    {
        public ProjectIssueBuilder Analyze(Mono.Cecil.MethodDefinition methodDefinition, Mono.Cecil.Cil.Instruction inst);
        public System.Collections.Generic.IEnumerable<Mono.Cecil.Cil.OpCode> GetOpCodes();
        public void Initialize(ProjectAuditorModule module);
    }
}

namespace Unity.ProjectAuditor.Editor.Modules
{
    public enum AssemblyProperty
    {
        CompileTime = 1,
        Num = 2,
        ReadOnly = 0,
    }

    public enum BuildReportFileProperty
    {
        BuildFile = 3,
        ImporterType = 0,
        Num = 4,
        RuntimeType = 1,
        Size = 2,
    }

    public enum BuildReportMetaData
    {
        Num = 1,
        Value = 0,
    }

    public enum BuildReportStepProperty
    {
        Duration = 0,
        Num = 1,
    }

    public enum CodeProperty
    {
        Assembly = 0,
        Num = 1,
    }

    public enum CompilerMessageProperty
    {
        Assembly = 1,
        Code = 0,
        Num = 2,
    }

    public interface IBuildReportProvider
    {
        public UnityEditor.Build.Reporting.BuildReport GetBuildReport();
    }

    public enum MetaDataProperty
    {
        Num = 1,
        Value = 0,
    }

    public enum PrecompiledAssemblyProperty
    {
        Num = 1,
        RoslynAnalyzer = 0,
    }

    public enum ShaderMessageProperty
    {
        Num = 2,
        Platform = 1,
        ShaderName = 0,
    }

    public enum ShaderProperty
    {
        AlwaysIncluded = 7,
        Instancing = 5,
        Num = 8,
        NumKeywords = 3,
        NumPasses = 2,
        NumVariants = 1,
        RenderQueue = 4,
        Size = 0,
        SrpBatcher = 6,
    }

    public enum ShaderVariantProperty
    {
        Compiled = 0,
        Keywords = 6,
        Num = 9,
        PassName = 5,
        PassType = 4,
        Platform = 1,
        PlatformKeywords = 7,
        Requirements = 8,
        Stage = 3,
        Tier = 2,
    }
}

namespace Unity.ProjectAuditor.Editor.SettingsAnalysis
{
    public interface ISettingsAnalyzer
    {
        public System.Collections.Generic.IEnumerable<ProjectIssue> Analyze(UnityEditor.BuildTarget platform);
        public void Initialize(ProjectAuditorModule module);
    }
}

namespace Unity.ProjectAuditor.Editor.Utils
{
    public class Exporter : System.IDisposable
    {
        public Exporter(string path, IssueLayout layout) {}
        public void Dispose();
        public void WriteHeader();
        public void WriteIssues(ProjectIssue[] issues);
    }

    public class Location
    {
        public string Extension { get; }
        public string Filename { get; }
        public string FormattedFilename { get; }
        public string FormattedPath { get; }
        public int Line { get; }
        public string Path { get; }
        public Location(string path) {}
        public Location(string path, int line) {}
        public bool IsValid();
    }
}
