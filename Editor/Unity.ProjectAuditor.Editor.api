// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.ProjectAuditor.Editor
{
    public enum Area
    {
        public const Unity.ProjectAuditor.Editor.Area BuildSize = 3;
        public const Unity.ProjectAuditor.Editor.Area BuildTime = 4;
        public const Unity.ProjectAuditor.Editor.Area CPU = 0;
        public const Unity.ProjectAuditor.Editor.Area GPU = 1;
        public const Unity.ProjectAuditor.Editor.Area Info = 6;
        public const Unity.ProjectAuditor.Editor.Area LoadTime = 5;
        public const Unity.ProjectAuditor.Editor.Area Memory = 2;
        public int value__;
    }

    public class AssetDependencyNode : Unity.ProjectAuditor.Editor.DependencyNode
    {
        public AssetDependencyNode() {}
        public virtual string GetPrettyName();
        public virtual bool IsPerfCritical();
    }

    public abstract class DependencyNode
    {
        public Unity.ProjectAuditor.Editor.Utils.Location location;
        protected System.Collections.Generic.List<Unity.ProjectAuditor.Editor.DependencyNode> m_Children;
        public bool perfCriticalContext;
        public string prettyName { get; }
        protected DependencyNode() {}
        public void AddChild(Unity.ProjectAuditor.Editor.DependencyNode child);
        public Unity.ProjectAuditor.Editor.DependencyNode GetChild(int index = 0);
        public int GetNumChildren();
        public abstract string GetPrettyName();
        public bool HasChildren();
        public bool HasValidChildren();
        public abstract bool IsPerfCritical();
    }

    public interface IProgress
    {
        public abstract void Advance(string description = );
        public abstract void Clear();
        public abstract void Start(string title, string description, int total);
    }

    public interface IProjectAuditorModule
    {
        public abstract void Audit(System.Action<Unity.ProjectAuditor.Editor.ProjectIssue> onIssueFound, System.Action onComplete = default(System.Action), Unity.ProjectAuditor.Editor.IProgress progress = default(Unity.ProjectAuditor.Editor.IProgress));
        public abstract System.Collections.Generic.IEnumerable<Unity.ProjectAuditor.Editor.ProblemDescriptor> GetDescriptors();
        public abstract System.Collections.Generic.IEnumerable<Unity.ProjectAuditor.Editor.IssueLayout> GetLayouts();
        public abstract void Initialize(Unity.ProjectAuditor.Editor.ProjectAuditorConfig config);
        public abstract bool IsSupported();
        public abstract void RegisterDescriptor(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor);
    }

    public interface IProjectIssueFilter
    {
        public abstract bool Match(Unity.ProjectAuditor.Editor.ProjectIssue issue);
    }

    public enum IssueCategory
    {
        public const Unity.ProjectAuditor.Editor.IssueCategory Assembly = 10;
        public const Unity.ProjectAuditor.Editor.IssueCategory Asset = 1;
        public const Unity.ProjectAuditor.Editor.IssueCategory BuildFile = 8;
        public const Unity.ProjectAuditor.Editor.IssueCategory BuildStep = 9;
        public const Unity.ProjectAuditor.Editor.IssueCategory Code = 4;
        public const Unity.ProjectAuditor.Editor.IssueCategory CodeCompilerMessage = 5;
        public const Unity.ProjectAuditor.Editor.IssueCategory GenericInstance = 6;
        public const Unity.ProjectAuditor.Editor.IssueCategory MetaData = 0;
        public const Unity.ProjectAuditor.Editor.IssueCategory NumCategories = 11;
        public const Unity.ProjectAuditor.Editor.IssueCategory ProjectSetting = 7;
        public const Unity.ProjectAuditor.Editor.IssueCategory Shader = 2;
        public const Unity.ProjectAuditor.Editor.IssueCategory ShaderVariant = 3;
        public int value__;
    }

    public class IssueLayout
    {
        public Unity.ProjectAuditor.Editor.IssueCategory category;
        public bool hierarchy;
        public Unity.ProjectAuditor.Editor.PropertyDefinition[] properties;
        public IssueLayout() {}
    }

    public class ProblemDescriptor : System.IEquatable<Unity.ProjectAuditor.Editor.ProblemDescriptor>
    {
        public string area;
        public bool critical;
        public string customevaluator;
        public string description;
        public int id;
        public string maximumVersion;
        public string method;
        public string minimumVersion;
        public string[] platforms;
        public string problem;
        public Unity.ProjectAuditor.Editor.Rule.Severity severity;
        public string solution;
        public string type;
        public string value;
        public ProblemDescriptor(int id, string description, string area, string problem = default(string), string solution = default(string)) {}
        public ProblemDescriptor(int id, string description, Unity.ProjectAuditor.Editor.Area area = 6, string problem = default(string), string solution = default(string)) {}
        public ProblemDescriptor(int id, string description, Unity.ProjectAuditor.Editor.Area[] areas, string problem = default(string), string solution = default(string)) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(Unity.ProjectAuditor.Editor.ProblemDescriptor other);
        public virtual int GetHashCode();
    }

    public class ProjectAuditor : UnityEditor.Build.IOrderedCallback, UnityEditor.Build.IPreprocessBuildWithReport
    {
        public const string DefaultAssetPath = Assets/Editor/ProjectAuditorConfig.asset;
        public const string PackagePath = Packages/com.unity.project-auditor;
        public virtual int callbackOrder { get; }
        public Unity.ProjectAuditor.Editor.ProjectAuditorConfig config { get; }
        public static string DataPath { get; }
        public static string PackageVersion { get; }
        public ProjectAuditor() {}
        public ProjectAuditor(string assetPath) {}
        public ProjectAuditor(Unity.ProjectAuditor.Editor.ProjectAuditorConfig projectAuditorConfig) {}
        public Unity.ProjectAuditor.Editor.ProjectReport Audit(Unity.ProjectAuditor.Editor.IProgress progress = default(Unity.ProjectAuditor.Editor.IProgress));
        public void Audit(System.Action<Unity.ProjectAuditor.Editor.ProjectIssue> onIssueFound, System.Action<bool> onUpdate, Unity.ProjectAuditor.Editor.IProgress progress = default(Unity.ProjectAuditor.Editor.IProgress));
        public Unity.ProjectAuditor.Editor.IssueLayout GetLayout(Unity.ProjectAuditor.Editor.IssueCategory category);
        public virtual void OnPreprocessBuild(UnityEditor.Build.Reporting.BuildReport report);
    }

    public class ProjectAuditorConfig : UnityEngine.ScriptableObject
    {
        public bool AnalyzeEditorCode;
        public bool AnalyzeInBackground;
        public bool AnalyzeOnBuild;
        public bool FailBuildOnIssues;
        public bool LogTimingsInfo;
        public int NumRules { get; }
        public ProjectAuditorConfig() {}
        public void AddRule(Unity.ProjectAuditor.Editor.Rule ruleToAdd);
        public void ClearAllRules();
        public void ClearRules(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor, string filter = );
        public Unity.ProjectAuditor.Editor.Rule.Severity GetAction(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor, string filter = );
        public Unity.ProjectAuditor.Editor.Rule GetRule(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor, string filter = );
    }

    public class ProjectIssue
    {
        public Unity.ProjectAuditor.Editor.IssueCategory category;
        public Unity.ProjectAuditor.Editor.DependencyNode dependencies;
        public int depth;
        public string description;
        public Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor;
        public Unity.ProjectAuditor.Editor.Utils.Location location;
        public string filename { get; }
        public bool isPerfCriticalContext { get; }
        public int line { get; }
        public string name { get; }
        public string relativePath { get; }
        public Unity.ProjectAuditor.Editor.Rule.Severity severity { get; }
        public ProjectIssue(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor, string description, Unity.ProjectAuditor.Editor.IssueCategory category, string[] customProperties) {}
        public ProjectIssue(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor, string description, Unity.ProjectAuditor.Editor.IssueCategory category, Unity.ProjectAuditor.Editor.CodeAnalysis.CallTreeNode dependenciesNode) {}
        public ProjectIssue(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor, string description, Unity.ProjectAuditor.Editor.IssueCategory category, string path, string[] customProperties) {}
        public ProjectIssue(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor, string description, Unity.ProjectAuditor.Editor.IssueCategory category, Unity.ProjectAuditor.Editor.Utils.Location location = default(Unity.ProjectAuditor.Editor.Utils.Location), string[] customProperties = default(string[])) {}
        public string GetCustomProperty<T>(T propertyEnum) where T : System.ValueType, new();
        public int GetNumCustomProperties();
        public void SetCustomProperties(string[] properties);
        public void SetCustomProperties(int numProperties, string property);
        public void SetCustomProperty<T>(T propertyEnum, string property) where T : System.ValueType, new();
    }

    public class ProjectReport
    {
        public int NumTotalIssues { get; }
        public ProjectReport() {}
        public Unity.ProjectAuditor.Editor.ProjectIssue[] GetAllIssues();
        public Unity.ProjectAuditor.Editor.ProjectIssue[] GetIssues(Unity.ProjectAuditor.Editor.IssueCategory category);
        public int GetNumIssues(Unity.ProjectAuditor.Editor.IssueCategory category);
        public static Unity.ProjectAuditor.Editor.ProjectReport Load(string path);
        public void Save(string path);
    }

    public struct PropertyDefinition
    {
        public Unity.ProjectAuditor.Editor.PropertyFormat format;
        public string longName;
        public string name;
        public Unity.ProjectAuditor.Editor.PropertyType type;
    }

    public enum PropertyFormat
    {
        public const Unity.ProjectAuditor.Editor.PropertyFormat Bool = 0;
        public const Unity.ProjectAuditor.Editor.PropertyFormat Bytes = 3;
        public const Unity.ProjectAuditor.Editor.PropertyFormat Integer = 1;
        public const Unity.ProjectAuditor.Editor.PropertyFormat String = 2;
        public int value__;
    }

    public enum PropertyType
    {
        public const Unity.ProjectAuditor.Editor.PropertyType Area = 2;
        public const Unity.ProjectAuditor.Editor.PropertyType CriticalContext = 6;
        public const Unity.ProjectAuditor.Editor.PropertyType Description = 0;
        public const Unity.ProjectAuditor.Editor.PropertyType Filename = 4;
        public const Unity.ProjectAuditor.Editor.PropertyType FileType = 5;
        public const Unity.ProjectAuditor.Editor.PropertyType Num = 7;
        public const Unity.ProjectAuditor.Editor.PropertyType Path = 3;
        public const Unity.ProjectAuditor.Editor.PropertyType Severity = 1;
        public int value__;
    }

    public struct PropertyTypeUtil
    {
        public static Unity.ProjectAuditor.Editor.PropertyType FromCustom<T>(T customPropEnum) where T : System.ValueType, new();
    }

    public class Rule : System.IEquatable<Unity.ProjectAuditor.Editor.Rule>
    {
        public string filter;
        public int id;
        public Unity.ProjectAuditor.Editor.Rule.Severity severity;
        public Rule() {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(Unity.ProjectAuditor.Editor.Rule other);
        public virtual int GetHashCode();
        public static bool operator ==(Unity.ProjectAuditor.Editor.Rule a, Unity.ProjectAuditor.Editor.Rule b);
        public static bool operator !=(Unity.ProjectAuditor.Editor.Rule a, Unity.ProjectAuditor.Editor.Rule b);
        public enum Severity
        {
            public const Unity.ProjectAuditor.Editor.Rule.Severity Default = 0;
            public const Unity.ProjectAuditor.Editor.Rule.Severity Error = 1;
            public const Unity.ProjectAuditor.Editor.Rule.Severity Hidden = 5;
            public const Unity.ProjectAuditor.Editor.Rule.Severity Info = 3;
            public const Unity.ProjectAuditor.Editor.Rule.Severity None = 4;
            public int value__;
            public const Unity.ProjectAuditor.Editor.Rule.Severity Warning = 2;
        }
    }

    public class TextFilter : Unity.ProjectAuditor.Editor.IProjectIssueFilter
    {
        public bool matchCase;
        public bool searchDependencies;
        public string searchText;
        public TextFilter() {}
        public virtual bool Match(Unity.ProjectAuditor.Editor.ProjectIssue issue);
    }
}

namespace Unity.ProjectAuditor.Editor.Auditors
{
    public enum AssemblyProperty
    {
        public const Unity.ProjectAuditor.Editor.Auditors.AssemblyProperty Num = 1;
        public const Unity.ProjectAuditor.Editor.Auditors.AssemblyProperty ReadOnly = 0;
        public int value__;
    }

    public class BuildAuditor : Unity.ProjectAuditor.Editor.IAuditor
    {
        public static Unity.ProjectAuditor.Editor.Auditors.IBuildReportProvider BuildReportProvider { get; set; }
        public BuildAuditor() {}
        public virtual void Audit(System.Action<Unity.ProjectAuditor.Editor.ProjectIssue> onIssueFound, System.Action onComplete = default(System.Action), Unity.ProjectAuditor.Editor.IProgressBar progressBar = default(Unity.ProjectAuditor.Editor.IProgressBar));
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(Unity.ProjectAuditor.Editor.Auditors.BuildAuditor.<GetDescriptors>d__20))] public virtual System.Collections.Generic.IEnumerable<Unity.ProjectAuditor.Editor.ProblemDescriptor> GetDescriptors();
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(Unity.ProjectAuditor.Editor.Auditors.BuildAuditor.<GetLayouts>d__21))] public virtual System.Collections.Generic.IEnumerable<Unity.ProjectAuditor.Editor.IssueLayout> GetLayouts();
        public virtual void Initialize(Unity.ProjectAuditor.Editor.ProjectAuditorConfig config);
        public virtual bool IsSupported();
        public virtual void RegisterDescriptor(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor);
    }

    public enum BuildReportFileProperty
    {
        public const Unity.ProjectAuditor.Editor.Auditors.BuildReportFileProperty BuildFile = 1;
        public const Unity.ProjectAuditor.Editor.Auditors.BuildReportFileProperty Num = 2;
        public const Unity.ProjectAuditor.Editor.Auditors.BuildReportFileProperty Size = 0;
        public int value__;
    }

    public enum BuildReportStepProperty
    {
        public const Unity.ProjectAuditor.Editor.Auditors.BuildReportStepProperty Duration = 0;
        public const Unity.ProjectAuditor.Editor.Auditors.BuildReportStepProperty Num = 1;
        public int value__;
    }

    public enum CodeProperty
    {
        public const Unity.ProjectAuditor.Editor.Auditors.CodeProperty Assembly = 0;
        public const Unity.ProjectAuditor.Editor.Auditors.CodeProperty Num = 1;
        public int value__;
    }

    public enum CompilerMessageProperty
    {
        public const Unity.ProjectAuditor.Editor.Auditors.CompilerMessageProperty Assembly = 1;
        public const Unity.ProjectAuditor.Editor.Auditors.CompilerMessageProperty Code = 0;
        public const Unity.ProjectAuditor.Editor.Auditors.CompilerMessageProperty Num = 2;
        public int value__;
    }

    public interface IBuildReportProvider
    {
        public abstract UnityEditor.Build.Reporting.BuildReport GetBuildReport();
    }

    public enum MetaDataProperty
    {
        public const Unity.ProjectAuditor.Editor.Auditors.MetaDataProperty Num = 1;
        public const Unity.ProjectAuditor.Editor.Auditors.MetaDataProperty Value = 0;
        public int value__;
    }

    public enum ShaderKeywordProperty
    {
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderKeywordProperty BuildSize = 2;
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderKeywordProperty Num = 3;
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderKeywordProperty NumShaders = 0;
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderKeywordProperty NumVariants = 1;
        public int value__;
    }

    public enum ShaderProperty
    {
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderProperty Instancing = 4;
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderProperty Num = 6;
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderProperty NumKeywords = 2;
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderProperty NumPasses = 1;
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderProperty NumVariants = 0;
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderProperty RenderQueue = 3;
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderProperty SrpBatcher = 5;
        public int value__;
    }

    public enum ShaderVariantProperty
    {
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderVariantProperty Compiled = 0;
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderVariantProperty Keywords = 3;
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderVariantProperty Num = 5;
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderVariantProperty PassName = 2;
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderVariantProperty Platform = 1;
        public const Unity.ProjectAuditor.Editor.Auditors.ShaderVariantProperty Requirements = 4;
        public int value__;
    }
}

namespace Unity.ProjectAuditor.Editor.CodeAnalysis
{
    public class CallTreeNode : Unity.ProjectAuditor.Editor.DependencyNode
    {
        public string assemblyName;
        public string methodName;
        public string name;
        public string typeName;
        public virtual string GetPrettyName();
        public virtual bool IsPerfCritical();
    }

    [System.Runtime.CompilerServices.Extension] public static class CodeIssueExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static string GetCallingMethod(Unity.ProjectAuditor.Editor.ProjectIssue issue);
    }
}

namespace Unity.ProjectAuditor.Editor.InstructionAnalyzers
{
    public interface IInstructionAnalyzer
    {
        public abstract Unity.ProjectAuditor.Editor.ProjectIssue Analyze(Mono.Cecil.MethodDefinition methodDefinition, Mono.Cecil.Cil.Instruction inst);
        public abstract System.Collections.Generic.IEnumerable<Mono.Cecil.Cil.OpCode> GetOpCodes();
        public abstract void Initialize(Unity.ProjectAuditor.Editor.IProjectAuditorModule module);
    }
}

namespace Unity.ProjectAuditor.Editor.SettingsAnalyzers
{
    public interface ISettingsAnalyzer
    {
        public abstract System.Collections.Generic.IEnumerable<Unity.ProjectAuditor.Editor.ProjectIssue> Analyze();
        public abstract void Initialize(Unity.ProjectAuditor.Editor.IProjectAuditorModule module);
    }
}

namespace Unity.ProjectAuditor.Editor.Utils
{
    public class Exporter : System.IDisposable
    {
        public Exporter(string path, Unity.ProjectAuditor.Editor.IssueLayout layout) {}
        public virtual void Dispose();
        public void WriteHeader();
        public void WriteIssues(Unity.ProjectAuditor.Editor.ProjectIssue[] issues);
    }

    public class Location
    {
        public string Extension { get; }
        public string Filename { get; }
        public int Line { get; }
        public string Path { get; }
        public bool IsValid();
    }

    [System.Runtime.CompilerServices.Extension] public static class ProjectIssueExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static string GetProperty(Unity.ProjectAuditor.Editor.ProjectIssue issue, Unity.ProjectAuditor.Editor.PropertyType propertyType);
    }
}
