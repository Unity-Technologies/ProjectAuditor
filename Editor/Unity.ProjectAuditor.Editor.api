// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.ProjectAuditor.Editor
{
    public enum IssueCategory
    {
        AnimationClip = 23,
        AnimatorController = 22,
        Assembly = 11,
        AssetDiagnostic = 1,
        AudioClip = 17,
        Avatar = 24,
        AvatarMask = 25,
        BuildFile = 8,
        BuildStep = 9,
        BuildSummary = 10,
        Code = 4,
        CodeCompilerMessage = 5,
        ComputeShaderVariant = 18,
        DomainReload = 26,
        FirstCustomCategory = 27,
        GenericInstance = 6,
        Material = 21,
        Mesh = 19,
        MetaData = 0,
        Package = 14,
        PackageDiagnostic = 15,
        PrecompiledAssembly = 12,
        ProjectSetting = 7,
        Shader = 2,
        ShaderCompilerMessage = 13,
        ShaderVariant = 3,
        SpriteAtlas = 20,
        Texture = 16,
    }

    public class Location
    {
        [Newtonsoft.Json.JsonIgnore] public string Extension { get; }
        [Newtonsoft.Json.JsonIgnore] public string Filename { get; }
        [Newtonsoft.Json.JsonIgnore] public string FormattedFilename { get; }
        [Newtonsoft.Json.JsonIgnore] public string FormattedPath { get; }
        [Newtonsoft.Json.JsonProperty(@"line")] public int Line { get; }
        [Newtonsoft.Json.JsonProperty(@"path")] public string Path { get; }
        public Location(string path) {}
        [Newtonsoft.Json.JsonConstructor] public Location(string path, int line) {}
        public bool IsValid();
    }

    public sealed class ProjectAuditor : UnityEditor.Build.IOrderedCallback, UnityEditor.Build.IPreprocessBuildWithReport
    {
        public int callbackOrder { get; }
        public ProjectAuditor() {}
        public ProjectAuditor(string assetPath) {}
        public ProjectAuditor(ProjectAuditorConfig projectAuditorConfig) {}
        public void OnPreprocessBuild(UnityEditor.Build.Reporting.BuildReport report);
    }

    public class ProjectAuditorConfig : UnityEngine.ScriptableObject
    {
        public ProjectAuditorConfig() {}
    }

    [UnityEngine.CreateAssetMenu(menuName = @"Project Auditor/Project Auditor Diagnostic Params")] public class ProjectAuditorDiagnosticParams : UnityEngine.ScriptableObject
    {
        public int LoadInBackGroundClipSizeThresholdBytes = 204800;
        public int LongCompressedMobileClipThresholdBytes = 204800;
        public int LongDecompressedClipThresholdBytes = 204800;
        public int MeshTriangleCountLimit = 5000;
        public int MeshVerticeCountLimit = 5000;
        public int SpriteAtlasEmptySpaceLimit = 50;
        public int StreamingAssetsFolderSizeLimit = 50;
        public int StreamingClipThresholdBytes = 218294;
        public int TextureSizeLimit = 2048;
        public int TextureStreamingMipmapsSizeLimit = 4000;
        public ProjectAuditorDiagnosticParams() {}
    }

    public class ProjectAuditorDiagnosticParamsProvider
    {
        public ProjectAuditorDiagnosticParamsProvider() {}
        public ProjectAuditorDiagnosticParams GetCurrentParams();
        public System.Collections.Generic.IEnumerable<ProjectAuditorDiagnosticParams> GetParams();
        public void Initialize();
        public void SelectCurrentParams(ProjectAuditorDiagnosticParams diagnosticParams);
    }

    public class ProjectIssue
    {
        public bool wasFixed = false;
        [Newtonsoft.Json.JsonProperty(@"category", NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)] public IssueCategory category { get; }
        [Newtonsoft.Json.JsonProperty(@"properties", NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)] public string[] customProperties { get; }
        [Newtonsoft.Json.JsonProperty(@"description")] public string description { get; }
        [Newtonsoft.Json.JsonIgnore] public string filename { get; }
        [Newtonsoft.Json.JsonIgnore] public Diagnostic.DescriptorID id { get; }
        [Newtonsoft.Json.JsonIgnore] public int line { get; }
        public Location location { get; set; }
        [Newtonsoft.Json.JsonIgnore] public Core.LogLevel logLevel { get; }
        [Newtonsoft.Json.JsonIgnore] public string relativePath { get; }
        public Diagnostic.Severity severity { get; set; }
        public string GetCustomProperty<T>(T propertyEnum) where T : struct, new();
        public bool GetCustomPropertyBool<T>(T propertyEnum) where T : struct, new();
        public double GetCustomPropertyDouble<T>(T propertyEnum) where T : struct, new();
        public float GetCustomPropertyFloat<T>(T propertyEnum) where T : struct, new();
        public int GetCustomPropertyInt32<T>(T propertyEnum) where T : struct, new();
        public long GetCustomPropertyInt64<T>(T propertyEnum) where T : struct, new();
        public System.UInt64 GetCustomPropertyUInt64<T>(T propertyEnum) where T : struct, new();
        public int GetNumCustomProperties();
        public bool IsDiagnostic();
        public bool IsMajorOrCritical();
        public bool IsValid();
        public void SetCustomProperty<T>(T propertyEnum, object property) where T : struct, new();
    }
}

namespace Unity.ProjectAuditor.Editor.AssemblyUtils
{
    public enum CodeOptimization
    {
        Debug = 0,
        Release = 1,
    }

    public enum CompilationMode
    {
        DevelopmentPlayer = 1,
        Editor = 3,
        EditorPlayMode = 2,
        Player = 0,
    }
}

namespace Unity.ProjectAuditor.Editor.Core
{
    public enum LogLevel
    {
        Error = 0,
        Info = 2,
        Warning = 1,
    }
}

namespace Unity.ProjectAuditor.Editor.Diagnostic
{
    public enum Area
    {
        BuildSize = 3,
        BuildTime = 4,
        CPU = 0,
        GPU = 1,
        IterationTime = 9,
        LoadTime = 5,
        Memory = 2,
        Quality = 6,
        Requirement = 8,
        Support = 7,
    }

    public sealed class Descriptor : System.IEquatable<Descriptor>
    {
        [Newtonsoft.Json.JsonRequired] public string[] areas;
        [Newtonsoft.Json.JsonRequired] public Severity defaultSeverity;
        [Newtonsoft.Json.JsonRequired] public string description;
        [Newtonsoft.Json.JsonProperty(NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)] public string documentationUrl;
        [Newtonsoft.Json.JsonIgnore] public System.Action<ProjectIssue> fixer;
        [Newtonsoft.Json.JsonRequired] public string id;
        [Newtonsoft.Json.JsonProperty(NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)] public string maximumVersion;
        public string messageFormat;
        [Newtonsoft.Json.JsonProperty(NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)] public string method;
        [Newtonsoft.Json.JsonProperty(NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)] public string minimumVersion;
        [Newtonsoft.Json.JsonProperty(NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)] public string[] platforms;
        [Newtonsoft.Json.JsonRequired] public string solution;
        [Newtonsoft.Json.JsonRequired] public string title;
        [Newtonsoft.Json.JsonProperty(NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)] public string type;
        [Newtonsoft.Json.JsonProperty(NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)] public string value;
        public Descriptor(string id, string title, string[] areas, string description, string solution) {}
        public Descriptor(string id, string title, Area area, string description, string solution) {}
        public Descriptor(string id, string title, Area[] areas, string description, string solution) {}
        public override bool Equals(object obj);
        public bool Equals(Descriptor other);
        public override int GetHashCode();
    }

    public struct DescriptorID : System.IEquatable<DescriptorID>
    {
        public DescriptorID(string id) {}
        public int AsInt();
        public string AsString();
        public bool Equals(string other);
        public bool Equals(DescriptorID other);
        public Descriptor GetDescriptor();
        public static int HashDescriptorString(string id);
        public bool IsValid();
        public static int op_Implicit(DescriptorID d);
        public static string op_Implicit(DescriptorID d);
        public static DescriptorID op_Implicit(string id);
        public override string ToString();
    }

    public class DescriptorLibrary : UnityEngine.ISerializationCallbackReceiver
    {
        public DescriptorLibrary() {}
        public static Descriptor GetDescriptor(int idAsInt);
        public void OnAfterDeserialize();
        public void OnBeforeSerialize();
        public static bool RegisterDescriptor(string id, Descriptor descriptor);
        public static bool RegisterDescriptor(DescriptorID id, Descriptor descriptor);
    }

    public enum Severity
    {
        Critical = 2,
        Default = 0,
        Error = 1,
        Hidden = 7,
        Info = 5,
        Major = 3,
        Minor = 5,
        Moderate = 4,
        None = 6,
        Warning = 4,
    }
}

namespace Unity.ProjectAuditor.Editor.Internal
{
    public class RoslynAnalyzerUtil
    {
        public RoslynAnalyzerUtil() {}
        public static void ImportDLL();
    }
}
