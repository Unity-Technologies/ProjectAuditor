// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.ProjectAuditor.Editor
{
    public enum Area
    {
        public const Unity.ProjectAuditor.Editor.Area BuildSize = 3;
        public const Unity.ProjectAuditor.Editor.Area BuildTime = 4;
        public const Unity.ProjectAuditor.Editor.Area CPU = 0;
        public const Unity.ProjectAuditor.Editor.Area GPU = 1;
        public const Unity.ProjectAuditor.Editor.Area LoadTime = 5;
        public const Unity.ProjectAuditor.Editor.Area Memory = 2;
        public int value__;
    }

    public class AssetDependencyNode : Unity.ProjectAuditor.Editor.DependencyNode
    {
        public AssetDependencyNode() {}
        public virtual string GetName();
        public virtual string GetPrettyName();
        public virtual bool IsPerfCritical();
    }

    public abstract class DependencyNode
    {
        public Unity.ProjectAuditor.Editor.Utils.Location location;
        protected System.Collections.Generic.List<Unity.ProjectAuditor.Editor.DependencyNode> m_Children;
        public bool perfCriticalContext;
        public string name { get; }
        public string prettyName { get; }
        protected DependencyNode() {}
        public void AddChild(Unity.ProjectAuditor.Editor.DependencyNode child);
        public Unity.ProjectAuditor.Editor.DependencyNode GetChild(int index = 0);
        public abstract string GetName();
        public int GetNumChildren();
        public abstract string GetPrettyName();
        public bool HasChildren();
        public bool HasValidChildren();
        public abstract bool IsPerfCritical();
        public void SortChildren();
    }

    public interface IProgress
    {
        public abstract void Advance(string description = );
        public abstract void Clear();
        public abstract void Start(string title, string description, int total);
    }

    public interface IProjectIssueFilter
    {
        public abstract bool Match(Unity.ProjectAuditor.Editor.ProjectIssue issue);
    }

    public enum IssueCategory
    {
        public const Unity.ProjectAuditor.Editor.IssueCategory Assembly = 11;
        public const Unity.ProjectAuditor.Editor.IssueCategory Asset = 1;
        public const Unity.ProjectAuditor.Editor.IssueCategory BuildFile = 8;
        public const Unity.ProjectAuditor.Editor.IssueCategory BuildStep = 9;
        public const Unity.ProjectAuditor.Editor.IssueCategory BuildSummary = 10;
        public const Unity.ProjectAuditor.Editor.IssueCategory Code = 4;
        public const Unity.ProjectAuditor.Editor.IssueCategory CodeCompilerMessage = 5;
        public const Unity.ProjectAuditor.Editor.IssueCategory FirstCustomCategory = 14;
        public const Unity.ProjectAuditor.Editor.IssueCategory GenericInstance = 6;
        public const Unity.ProjectAuditor.Editor.IssueCategory MetaData = 0;
        public const Unity.ProjectAuditor.Editor.IssueCategory PrecompiledAssembly = 12;
        public const Unity.ProjectAuditor.Editor.IssueCategory ProjectSetting = 7;
        public const Unity.ProjectAuditor.Editor.IssueCategory Shader = 2;
        public const Unity.ProjectAuditor.Editor.IssueCategory ShaderCompilerMessage = 13;
        public const Unity.ProjectAuditor.Editor.IssueCategory ShaderVariant = 3;
        public int value__;
    }

    public class IssueLayout
    {
        public Unity.ProjectAuditor.Editor.IssueCategory category;
        public bool hierarchy;
        public Unity.ProjectAuditor.Editor.PropertyDefinition[] properties;
        public int defaultGroupPropertyIndex { get; }
        public IssueLayout() {}
    }

    public sealed class ProblemDescriptor : System.IEquatable<Unity.ProjectAuditor.Editor.ProblemDescriptor>
    {
        public string[] areas;
        public bool critical;
        public string customevaluator;
        public string description;
        public string id;
        public string maximumVersion;
        public string messageFormat;
        public string method;
        public string minimumVersion;
        public string[] platforms;
        public string problem;
        public Unity.ProjectAuditor.Editor.Rule.Severity severity;
        public string solution;
        public string type;
        public string value;
        public ProblemDescriptor(string id, string description, Unity.ProjectAuditor.Editor.Area area, string problem = default(string), string solution = default(string)) {}
        public ProblemDescriptor(string id, string description, Unity.ProjectAuditor.Editor.Area[] areas, string problem = default(string), string solution = default(string)) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(Unity.ProjectAuditor.Editor.ProblemDescriptor other);
        public virtual int GetHashCode();
    }

    [System.Runtime.CompilerServices.Extension] public static class ProblemDescriptorExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static Unity.ProjectAuditor.Editor.Area[] GetAreas(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor);
        [System.Runtime.CompilerServices.Extension] public static string GetAreasSummary(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor);
        [System.Runtime.CompilerServices.Extension] public static string GetFullTypeName(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor);
        [System.Runtime.CompilerServices.Extension] public static bool IsPlatformCompatible(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor, UnityEditor.BuildTarget buildTarget);
    }

    public sealed class ProjectAuditor : UnityEditor.Build.IOrderedCallback, UnityEditor.Build.IPreprocessBuildWithReport
    {
        public virtual int callbackOrder { get; }
        public Unity.ProjectAuditor.Editor.ProjectAuditorConfig config { get; }
        public ProjectAuditor() {}
        public ProjectAuditor(string assetPath) {}
        public ProjectAuditor(Unity.ProjectAuditor.Editor.ProjectAuditorConfig projectAuditorConfig) {}
        public Unity.ProjectAuditor.Editor.ProjectReport Audit(Unity.ProjectAuditor.Editor.IProgress progress = default(Unity.ProjectAuditor.Editor.IProgress));
        public Unity.ProjectAuditor.Editor.ProjectReport Audit(Unity.ProjectAuditor.Editor.ProjectAuditorParams projectAuditorParams, Unity.ProjectAuditor.Editor.IProgress progress = default(Unity.ProjectAuditor.Editor.IProgress));
        public void AuditAsync(Unity.ProjectAuditor.Editor.ProjectAuditorParams projectAuditorParams, Unity.ProjectAuditor.Editor.IProgress progress = default(Unity.ProjectAuditor.Editor.IProgress));
        public Unity.ProjectAuditor.Editor.IssueCategory[] GetCategories();
        public Unity.ProjectAuditor.Editor.IssueLayout GetLayout(Unity.ProjectAuditor.Editor.IssueCategory category);
        public static Unity.ProjectAuditor.Editor.IssueCategory GetOrRegisterCategory(string name);
        public static int NumCategories();
        public virtual void OnPreprocessBuild(UnityEditor.Build.Reporting.BuildReport report);
    }

    public class ProjectAuditorConfig : UnityEngine.ScriptableObject
    {
        public bool AnalyzeInBackground;
        public bool AnalyzeOnBuild;
        public Unity.ProjectAuditor.Editor.AssemblyUtils.CompilationMode CompilationMode;
        public bool FailBuildOnIssues;
        public bool SaveBuildReports;
        public bool UseRoslynAnalyzers;
        public int NumRules { get; }
        public ProjectAuditorConfig() {}
        public void AddRule(Unity.ProjectAuditor.Editor.Rule ruleToAdd);
        public void ClearAllRules();
        public void ClearRules(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor, string filter = );
        public Unity.ProjectAuditor.Editor.Rule.Severity GetAction(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor, string filter = );
        public Unity.ProjectAuditor.Editor.Rule GetRule(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor, string filter = );
    }

    public abstract class ProjectAuditorModule
    {
        protected ProjectAuditorModule() {}
        public abstract void Audit(Unity.ProjectAuditor.Editor.ProjectAuditorParams projectAuditorParams, Unity.ProjectAuditor.Editor.IProgress progress = default(Unity.ProjectAuditor.Editor.IProgress));
        public Unity.ProjectAuditor.Editor.IssueCategory[] GetCategories();
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(Unity.ProjectAuditor.Editor.ProjectAuditorModule.<GetDescriptors>d__1))] public virtual System.Collections.Generic.IEnumerable<Unity.ProjectAuditor.Editor.ProblemDescriptor> GetDescriptors();
        public abstract System.Collections.Generic.IEnumerable<Unity.ProjectAuditor.Editor.IssueLayout> GetLayouts();
        public virtual void Initialize(Unity.ProjectAuditor.Editor.ProjectAuditorConfig config);
        public virtual bool IsEnabledByDefault();
        public virtual bool IsSupported();
        public virtual void RegisterDescriptor(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor);
    }

    public class ProjectAuditorParams
    {
        public string[] assemblyNames;
        public Unity.ProjectAuditor.Editor.IssueCategory[] categories;
        public Unity.ProjectAuditor.Editor.AssemblyUtils.CodeOptimization codeOptimization;
        public System.Action onComplete;
        public System.Action<Unity.ProjectAuditor.Editor.ProjectIssue> onIssueFound;
        public System.Action<Unity.ProjectAuditor.Editor.ProjectReport> onUpdate;
        public UnityEditor.BuildTarget platform;
        public ProjectAuditorParams() {}
        public ProjectAuditorParams(Unity.ProjectAuditor.Editor.ProjectAuditorParams original) {}
    }

    public class ProjectIssue
    {
        public int depth;
        public Unity.ProjectAuditor.Editor.IssueCategory category { get; }
        public string[] customProperties { get; }
        public Unity.ProjectAuditor.Editor.DependencyNode dependencies { get; }
        public string description { get; }
        public Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor { get; }
        public string filename { get; }
        public bool isPerfCriticalContext { get; }
        public int line { get; }
        public Unity.ProjectAuditor.Editor.Utils.Location location { get; }
        public string relativePath { get; }
        public Unity.ProjectAuditor.Editor.Rule.Severity severity { get; }
        public static Unity.ProjectAuditor.Editor.ProjectIssueBuilder Create(Unity.ProjectAuditor.Editor.IssueCategory category, string description);
        public static Unity.ProjectAuditor.Editor.ProjectIssueBuilder Create(Unity.ProjectAuditor.Editor.IssueCategory category, Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor, params object[] args);
        public string GetCustomProperty<T>(T propertyEnum) where T : System.ValueType, new();
        public double GetCustomPropertyAsDouble<T>(T propertyEnum) where T : System.ValueType, new();
        public float GetCustomPropertyAsFloat<T>(T propertyEnum) where T : System.ValueType, new();
        public int GetNumCustomProperties();
        public void SetCustomProperty<T>(T propertyEnum, object property) where T : System.ValueType, new();
    }

    public class ProjectIssueBuilder
    {
        public static Unity.ProjectAuditor.Editor.ProjectIssue op_Implicit(Unity.ProjectAuditor.Editor.ProjectIssueBuilder builder);
        public Unity.ProjectAuditor.Editor.ProjectIssueBuilder WithCustomProperties(object[] properties);
        public Unity.ProjectAuditor.Editor.ProjectIssueBuilder WithCustomProperties(int numProperties, object property);
        public Unity.ProjectAuditor.Editor.ProjectIssueBuilder WithDependencies(Unity.ProjectAuditor.Editor.DependencyNode dependencies);
        public Unity.ProjectAuditor.Editor.ProjectIssueBuilder WithDescription(string description);
        public Unity.ProjectAuditor.Editor.ProjectIssueBuilder WithLocation(Unity.ProjectAuditor.Editor.Utils.Location location);
        public Unity.ProjectAuditor.Editor.ProjectIssueBuilder WithSeverity(Unity.ProjectAuditor.Editor.Rule.Severity severity);
    }

    [System.Runtime.CompilerServices.Extension] public static class ProjectIssueExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static string GetContext(Unity.ProjectAuditor.Editor.ProjectIssue issue);
        [System.Runtime.CompilerServices.Extension] public static string GetProperty(Unity.ProjectAuditor.Editor.ProjectIssue issue, Unity.ProjectAuditor.Editor.PropertyType propertyType);
        [System.Runtime.CompilerServices.Extension] public static string GetPropertyGroup(Unity.ProjectAuditor.Editor.ProjectIssue issue, Unity.ProjectAuditor.Editor.PropertyDefinition propertyDefinition);
    }

    public sealed class ProjectReport
    {
        public int NumTotalIssues { get; }
        public void ExportToCSV(string path, Unity.ProjectAuditor.Editor.IssueLayout layout, System.Func<Unity.ProjectAuditor.Editor.ProjectIssue, bool> predicate = default(System.Func<Unity.ProjectAuditor.Editor.ProjectIssue, bool>));
        public System.Collections.Generic.IReadOnlyCollection<Unity.ProjectAuditor.Editor.ProjectIssue> GetAllIssues();
        public System.Collections.Generic.IReadOnlyCollection<Unity.ProjectAuditor.Editor.ProjectIssue> GetIssues(Unity.ProjectAuditor.Editor.IssueCategory category);
        public int GetNumIssues(Unity.ProjectAuditor.Editor.IssueCategory category);
        public static Unity.ProjectAuditor.Editor.ProjectReport Load(string path);
        public void Save(string path);
    }

    public struct PropertyDefinition
    {
        public bool defaultGroup;
        public Unity.ProjectAuditor.Editor.PropertyFormat format;
        public string longName;
        public string name;
        public Unity.ProjectAuditor.Editor.PropertyType type;
    }

    public enum PropertyFormat
    {
        public const Unity.ProjectAuditor.Editor.PropertyFormat Bool = 1;
        public const Unity.ProjectAuditor.Editor.PropertyFormat Bytes = 3;
        public const Unity.ProjectAuditor.Editor.PropertyFormat Integer = 2;
        public const Unity.ProjectAuditor.Editor.PropertyFormat String = 0;
        public const Unity.ProjectAuditor.Editor.PropertyFormat Time = 4;
        public int value__;
    }

    public enum PropertyType
    {
        public const Unity.ProjectAuditor.Editor.PropertyType Area = 3;
        public const Unity.ProjectAuditor.Editor.PropertyType CriticalContext = 8;
        public const Unity.ProjectAuditor.Editor.PropertyType Description = 0;
        public const Unity.ProjectAuditor.Editor.PropertyType Descriptor = 1;
        public const Unity.ProjectAuditor.Editor.PropertyType Directory = 5;
        public const Unity.ProjectAuditor.Editor.PropertyType Filename = 6;
        public const Unity.ProjectAuditor.Editor.PropertyType FileType = 7;
        public const Unity.ProjectAuditor.Editor.PropertyType Num = 9;
        public const Unity.ProjectAuditor.Editor.PropertyType Path = 4;
        public const Unity.ProjectAuditor.Editor.PropertyType Severity = 2;
        public int value__;
    }

    public struct PropertyTypeUtil
    {
        public static Unity.ProjectAuditor.Editor.PropertyType FromCustom<T>(T customPropEnum) where T : System.ValueType, new();
        public static bool IsCustom(Unity.ProjectAuditor.Editor.PropertyType type);
        public static int ToCustomIndex(Unity.ProjectAuditor.Editor.PropertyType type);
    }

    public class Rule : System.IEquatable<Unity.ProjectAuditor.Editor.Rule>
    {
        public string filter;
        public string id;
        public Unity.ProjectAuditor.Editor.Rule.Severity severity;
        public Rule() {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(Unity.ProjectAuditor.Editor.Rule other);
        public virtual int GetHashCode();
        public static bool operator ==(Unity.ProjectAuditor.Editor.Rule a, Unity.ProjectAuditor.Editor.Rule b);
        public static bool operator !=(Unity.ProjectAuditor.Editor.Rule a, Unity.ProjectAuditor.Editor.Rule b);
        public enum Severity
        {
            public const Unity.ProjectAuditor.Editor.Rule.Severity Default = 0;
            public const Unity.ProjectAuditor.Editor.Rule.Severity Error = 1;
            public const Unity.ProjectAuditor.Editor.Rule.Severity Hidden = 5;
            public const Unity.ProjectAuditor.Editor.Rule.Severity Info = 3;
            public const Unity.ProjectAuditor.Editor.Rule.Severity None = 4;
            public int value__;
            public const Unity.ProjectAuditor.Editor.Rule.Severity Warning = 2;
        }
    }

    public class UserPreferences
    {
        public static bool developerMode { get; set; }
        public static bool logTimingsInfo { get; set; }
        public UserPreferences() {}
    }
}

namespace Unity.ProjectAuditor.Editor.AssemblyUtils
{
    public enum CodeOptimization
    {
        public const Unity.ProjectAuditor.Editor.AssemblyUtils.CodeOptimization Debug = 0;
        public const Unity.ProjectAuditor.Editor.AssemblyUtils.CodeOptimization Release = 1;
        public int value__;
    }

    public enum CompilationMode
    {
        public const Unity.ProjectAuditor.Editor.AssemblyUtils.CompilationMode DevelopmentPlayer = 1;
        public const Unity.ProjectAuditor.Editor.AssemblyUtils.CompilationMode Editor = 3;
        public const Unity.ProjectAuditor.Editor.AssemblyUtils.CompilationMode EditorPlayMode = 2;
        public const Unity.ProjectAuditor.Editor.AssemblyUtils.CompilationMode Player = 0;
        public int value__;
    }
}

namespace Unity.ProjectAuditor.Editor.CodeAnalysis
{
    public class CallTreeNode : Unity.ProjectAuditor.Editor.DependencyNode
    {
        public readonly string assemblyName;
        public readonly string methodName;
        public readonly string typeName;
        public virtual string GetName();
        public virtual string GetPrettyName();
        public virtual bool IsPerfCritical();
    }
}

namespace Unity.ProjectAuditor.Editor.InstructionAnalyzers
{
    public interface IInstructionAnalyzer
    {
        public abstract Unity.ProjectAuditor.Editor.ProjectIssueBuilder Analyze(Mono.Cecil.MethodDefinition methodDefinition, Mono.Cecil.Cil.Instruction inst);
        public abstract System.Collections.Generic.IEnumerable<Mono.Cecil.Cil.OpCode> GetOpCodes();
        public abstract void Initialize(Unity.ProjectAuditor.Editor.ProjectAuditorModule module);
    }
}

namespace Unity.ProjectAuditor.Editor.Modules
{
    public enum AssemblyProperty
    {
        public const Unity.ProjectAuditor.Editor.Modules.AssemblyProperty CompileTime = 1;
        public const Unity.ProjectAuditor.Editor.Modules.AssemblyProperty Num = 2;
        public const Unity.ProjectAuditor.Editor.Modules.AssemblyProperty ReadOnly = 0;
        public int value__;
    }

    public enum BuildReportFileProperty
    {
        public const Unity.ProjectAuditor.Editor.Modules.BuildReportFileProperty BuildFile = 3;
        public const Unity.ProjectAuditor.Editor.Modules.BuildReportFileProperty ImporterType = 0;
        public const Unity.ProjectAuditor.Editor.Modules.BuildReportFileProperty Num = 4;
        public const Unity.ProjectAuditor.Editor.Modules.BuildReportFileProperty RuntimeType = 1;
        public const Unity.ProjectAuditor.Editor.Modules.BuildReportFileProperty Size = 2;
        public int value__;
    }

    public enum BuildReportMetaData
    {
        public const Unity.ProjectAuditor.Editor.Modules.BuildReportMetaData Num = 1;
        public const Unity.ProjectAuditor.Editor.Modules.BuildReportMetaData Value = 0;
        public int value__;
    }

    public enum BuildReportStepProperty
    {
        public const Unity.ProjectAuditor.Editor.Modules.BuildReportStepProperty Duration = 0;
        public const Unity.ProjectAuditor.Editor.Modules.BuildReportStepProperty Num = 1;
        public int value__;
    }

    public enum CodeProperty
    {
        public const Unity.ProjectAuditor.Editor.Modules.CodeProperty Assembly = 0;
        public const Unity.ProjectAuditor.Editor.Modules.CodeProperty Num = 1;
        public int value__;
    }

    public enum CompilerMessageProperty
    {
        public const Unity.ProjectAuditor.Editor.Modules.CompilerMessageProperty Assembly = 1;
        public const Unity.ProjectAuditor.Editor.Modules.CompilerMessageProperty Code = 0;
        public const Unity.ProjectAuditor.Editor.Modules.CompilerMessageProperty Num = 2;
        public int value__;
    }

    public interface IBuildReportProvider
    {
        public abstract UnityEditor.Build.Reporting.BuildReport GetBuildReport();
    }

    public enum MetaDataProperty
    {
        public const Unity.ProjectAuditor.Editor.Modules.MetaDataProperty Num = 1;
        public const Unity.ProjectAuditor.Editor.Modules.MetaDataProperty Value = 0;
        public int value__;
    }

    public enum PrecompiledAssemblyProperty
    {
        public const Unity.ProjectAuditor.Editor.Modules.PrecompiledAssemblyProperty Num = 1;
        public const Unity.ProjectAuditor.Editor.Modules.PrecompiledAssemblyProperty RoslynAnalyzer = 0;
        public int value__;
    }

    public enum ShaderMessageProperty
    {
        public const Unity.ProjectAuditor.Editor.Modules.ShaderMessageProperty Num = 2;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderMessageProperty Platform = 1;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderMessageProperty ShaderName = 0;
        public int value__;
    }

    public enum ShaderProperty
    {
        public const Unity.ProjectAuditor.Editor.Modules.ShaderProperty AlwaysIncluded = 7;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderProperty Instancing = 5;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderProperty Num = 8;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderProperty NumKeywords = 3;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderProperty NumPasses = 2;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderProperty NumVariants = 1;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderProperty RenderQueue = 4;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderProperty Size = 0;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderProperty SrpBatcher = 6;
        public int value__;
    }

    public enum ShaderVariantProperty
    {
        public const Unity.ProjectAuditor.Editor.Modules.ShaderVariantProperty Compiled = 0;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderVariantProperty Keywords = 6;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderVariantProperty Num = 9;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderVariantProperty PassName = 5;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderVariantProperty PassType = 4;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderVariantProperty Platform = 1;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderVariantProperty PlatformKeywords = 7;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderVariantProperty Requirements = 8;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderVariantProperty Stage = 3;
        public const Unity.ProjectAuditor.Editor.Modules.ShaderVariantProperty Tier = 2;
        public int value__;
    }
}

namespace Unity.ProjectAuditor.Editor.SettingsAnalysis
{
    public interface ISettingsAnalyzer
    {
        public abstract System.Collections.Generic.IEnumerable<Unity.ProjectAuditor.Editor.ProjectIssue> Analyze(UnityEditor.BuildTarget platform);
        public abstract void Initialize(Unity.ProjectAuditor.Editor.ProjectAuditorModule module);
    }
}

namespace Unity.ProjectAuditor.Editor.Utils
{
    public class Exporter : System.IDisposable
    {
        public Exporter(string path, Unity.ProjectAuditor.Editor.IssueLayout layout) {}
        public virtual void Dispose();
        public void WriteHeader();
        public void WriteIssues(Unity.ProjectAuditor.Editor.ProjectIssue[] issues);
    }

    public class Location
    {
        public string Extension { get; }
        public string Filename { get; }
        public string FormattedFilename { get; }
        public string FormattedPath { get; }
        public int Line { get; }
        public string Path { get; }
        public Location(string path) {}
        public Location(string path, int line) {}
        public bool IsValid();
    }
}
