// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.ProjectAuditor.Editor.UI
{
    public class Draw2D
    {
        public Draw2D(string shaderName) {}
        public bool CheckAndSetupMaterial();
        public void ClearClipRect();
        public void DrawBox(float x, float y, float w, float h, UnityEngine.Color col);
        public void DrawBox(float x, float y, float w, float h, float r, float g, float b);
        public void DrawEnd();
        public void DrawFilledBox(float x, float y, float w, float h, UnityEngine.Color col);
        public void DrawFilledBox(float x, float y, float w, float h, float r, float g, float b);
        public void DrawLine(float x, float y, float x2, float y2, UnityEngine.Color col);
        public void DrawLine(float x, float y, float x2, float y2, float r, float g, float b);
        public bool DrawStart(UnityEngine.Rect r, Unity.ProjectAuditor.Editor.UI.Draw2D.Origin origin = 0);
        public bool DrawStart(float w, float h, Unity.ProjectAuditor.Editor.UI.Draw2D.Origin origin = 0, UnityEngine.GUIStyle style = default(UnityEngine.GUIStyle));
        public bool IsMaterialValid();
        public void OnGUI();
        public void SetClipRect(UnityEngine.Rect clipRect);
        public void Translate(ref float x, ref float y);
        public enum Origin
        {
            public const Unity.ProjectAuditor.Editor.UI.Draw2D.Origin BottomLeft = 1;
            public const Unity.ProjectAuditor.Editor.UI.Draw2D.Origin TopLeft = 0;
            public int value__;
        }
    }
}

namespace Unity.ProjectAuditor.Editor.UI.Framework
{
    public class AnalysisView : Unity.ProjectAuditor.Editor.IProjectIssueFilter
    {
        protected Unity.ProjectAuditor.Editor.UI.Draw2D m_2D;
        protected Unity.ProjectAuditor.Editor.IProjectIssueFilter m_BaseFilter;
        protected Unity.ProjectAuditor.Editor.ProjectAuditorConfig m_Config;
        protected Unity.ProjectAuditor.Editor.UI.Framework.ViewDescriptor m_Desc;
        protected System.Collections.Generic.List<Unity.ProjectAuditor.Editor.ProjectIssue> m_Issues;
        protected Unity.ProjectAuditor.Editor.UI.Framework.Preferences m_Preferences;
        protected Unity.ProjectAuditor.Editor.TextFilter m_TextFilter;
        protected Unity.ProjectAuditor.Editor.UI.Framework.ViewManager m_ViewManager;
        public Unity.ProjectAuditor.Editor.UI.Framework.ViewDescriptor desc { get; }
        protected int numIssues { get; }
        public static int toolbarButtonSize { get; }
        public AnalysisView(Unity.ProjectAuditor.Editor.UI.Framework.ViewManager viewManager) {}
        public virtual void AddIssues(System.Collections.Generic.IEnumerable<Unity.ProjectAuditor.Editor.ProjectIssue> allIssues);
        public virtual void Clear();
        public virtual void Create(Unity.ProjectAuditor.Editor.UI.Framework.ViewDescriptor descriptor, Unity.ProjectAuditor.Editor.IssueLayout layout, Unity.ProjectAuditor.Editor.ProjectAuditorConfig config, Unity.ProjectAuditor.Editor.UI.Framework.Preferences prefs, Unity.ProjectAuditor.Editor.IProjectIssueFilter filter);
        public virtual void DrawContent();
        public virtual void DrawFilters();
        public virtual void DrawFoldouts(Unity.ProjectAuditor.Editor.ProjectIssue[] selectedIssues);
        public void DrawInfo();
        public virtual void DrawTextSearch();
        protected virtual void Export(System.Func<Unity.ProjectAuditor.Editor.ProjectIssue, bool> predicate = default(System.Func<Unity.ProjectAuditor.Editor.ProjectIssue, bool>));
        protected Unity.ProjectAuditor.Editor.ProjectIssue[] GetIssues();
        protected string GetPrefKey(string key);
        public bool IsValid();
        public virtual bool Match(Unity.ProjectAuditor.Editor.ProjectIssue issue);
        protected virtual void OnDrawInfo();
        public void Refresh();
    }

    public static class EditorUtil
    {
        public static void FocusOnAssetInProjectWindow(Unity.ProjectAuditor.Editor.Utils.Location location);
        public static void OpenCodeDescriptor(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor);
        public static void OpenCompilerMessageDescriptor(Unity.ProjectAuditor.Editor.ProblemDescriptor descriptor);
        public static void OpenProjectSettings(Unity.ProjectAuditor.Editor.Utils.Location location);
        public static void OpenTextFile<T>(Unity.ProjectAuditor.Editor.Utils.Location location) where T : UnityEngine.Object;
    }

    public class IssueTableItem : UnityEditor.IMGUI.Controls.TreeViewItem
    {
        public readonly Unity.ProjectAuditor.Editor.ProblemDescriptor ProblemDescriptor;
        public readonly Unity.ProjectAuditor.Editor.ProjectIssue ProjectIssue;
        public IssueTableItem(int id, int depth, Unity.ProjectAuditor.Editor.ProblemDescriptor problemDescriptor) {}
        public IssueTableItem(int id, int depth, string displayName, Unity.ProjectAuditor.Editor.ProblemDescriptor problemDescriptor, Unity.ProjectAuditor.Editor.ProjectIssue projectIssue) {}
        public bool Find(Unity.ProjectAuditor.Editor.ProjectIssue issue);
        public string GetDisplayName();
        public bool IsGroup();
    }

    public class MultiSelectionTable : UnityEditor.IMGUI.Controls.TreeView
    {
        public MultiSelectionTable(UnityEditor.IMGUI.Controls.TreeViewState state, UnityEditor.IMGUI.Controls.MultiColumnHeader multicolumnHeader, string[] names, Unity.ProjectAuditor.Editor.UI.Framework.TreeViewSelection selection) {}
        protected virtual UnityEditor.IMGUI.Controls.TreeViewItem BuildRoot();
        protected virtual System.Collections.Generic.IList<UnityEditor.IMGUI.Controls.TreeViewItem> BuildRows(UnityEditor.IMGUI.Controls.TreeViewItem root);
        protected virtual bool CanMultiSelect(UnityEditor.IMGUI.Controls.TreeViewItem item);
        public void ClearSelection();
        public static UnityEditor.IMGUI.Controls.MultiColumnHeaderState CreateDefaultMultiColumnHeaderState(Unity.ProjectAuditor.Editor.UI.Framework.MultiSelectionTable.HeaderData[] headerData);
        protected int GetChildCount(Unity.ProjectAuditor.Editor.UI.Framework.TreeItemIdentifier selectedIdentifier, out int selected);
        public Unity.ProjectAuditor.Editor.UI.Framework.TreeViewSelection GetTreeViewSelection();
        protected virtual void RowGUI(UnityEditor.IMGUI.Controls.TreeView.RowGUIArgs args);
        public enum Column
        {
            public const Unity.ProjectAuditor.Editor.UI.Framework.MultiSelectionTable.Column GroupName = 2;
            public const Unity.ProjectAuditor.Editor.UI.Framework.MultiSelectionTable.Column ItemName = 0;
            public const Unity.ProjectAuditor.Editor.UI.Framework.MultiSelectionTable.Column State = 1;
            public int value__;
        }
        public struct HeaderData
        {
            public bool allowToggleVisibility;
            public bool autoResize;
            public UnityEngine.GUIContent content;
            public float minWidth;
            public float width;
            public HeaderData(string name, string tooltip = , float _width = 50, float _minWidth = 30, bool _autoResize = True, bool _allowToggleVisibility = True) {}
        }
        public enum SortOption
        {
            public const Unity.ProjectAuditor.Editor.UI.Framework.MultiSelectionTable.SortOption GroupName = 1;
            public const Unity.ProjectAuditor.Editor.UI.Framework.MultiSelectionTable.SortOption ItemName = 0;
            public int value__;
        }
    }

    public class Preferences
    {
        public bool actions;
        public bool dependencies;
        public bool details;
        public bool developerMode;
        public bool filters;
        public int fontSize;
        public bool info;
        public const int k_MaxFontSize = 22;
        public const int k_MinFontSize = 12;
        public bool mutedIssues;
        public bool onlyCriticalIssues;
        public bool recommendation;
        public Preferences() {}
    }

    public class ProgressBar : Unity.ProjectAuditor.Editor.IProgress
    {
        public ProgressBar() {}
        public virtual void Advance(string description = );
        public virtual void Clear();
        public virtual void Start(string title, string description, int total);
    }

    public static class SharedStyles
    {
        public static UnityEngine.GUIStyle Foldout { get; }
        public static UnityEngine.GUIStyle Label { get; }
        public static UnityEngine.GUIStyle LinkLabel { get; }
        public static UnityEngine.GUIStyle TextArea { get; }
    }

    public struct TreeItemIdentifier
    {
        public static int kAll;
        public static int kSingle;
        public int index { get; }
        public string name { get; }
        public string nameWithIndex { get; }
        public TreeItemIdentifier(string _nameWithIndex) {}
        public TreeItemIdentifier(Unity.ProjectAuditor.Editor.UI.Framework.TreeItemIdentifier treeItemIdentifier) {}
        public TreeItemIdentifier(string _name, int _index) {}
        public void SetAll();
        public void SetIndex(int newIndex);
        public void SetName(string newName);
    }

    public class TreeViewSelection
    {
        public System.Collections.Generic.List<string> groups;
        public System.Collections.Generic.List<string> selection;
        public TreeViewSelection() {}
        public TreeViewSelection(Unity.ProjectAuditor.Editor.UI.Framework.TreeViewSelection selection) {}
        public bool Contains(string name);
        public bool ContainsAny(string[] names);
        public bool ContainsGroup(string groupName);
        public string[] GetSelectedStrings(string[] names, bool summarize);
        public void Set(string name);
        public void Set(Unity.ProjectAuditor.Editor.UI.Framework.TreeViewSelection selection);
        public void SetAll(string[] names);
        public void SetGroup(string groupName);
    }

    public static class Utility
    {
        public static readonly UnityEngine.GUIContent CopyToClipboard;
        public static readonly UnityEngine.GUIContent OpenIssue;
        public static readonly UnityEngine.GUIContent OpenScriptReference;
        public static bool BoldFoldout(bool toggle, UnityEngine.GUIContent content);
        public static void DrawHelpButton(UnityEngine.GUIContent content, string page);
        public static void DrawSelectedText(string text);
        public static UnityEngine.GUIContent GetIcon(string name);
        public static UnityEngine.GUIContent GetSeverityIcon(Unity.ProjectAuditor.Editor.Rule.Severity severity, string tooltip = default(string));
        public static UnityEngine.GUIContent GetStatusWheel();
        public static UnityEngine.GUIContent GetTextContentWithAssetIcon(string displayName, string assetPath);
        public static UnityEngine.GUIContent GetTextWithSeverityIcon(string text, string tooltip, Unity.ProjectAuditor.Editor.Rule.Severity severity);
        public static string GetTreeViewSelectedSummary(Unity.ProjectAuditor.Editor.UI.Framework.TreeViewSelection selection, string[] names);
        public static void ToolbarDropdownList(Unity.ProjectAuditor.Editor.UI.Framework.Utility.DropdownItem[] items, int selectionIndex, UnityEditor.GenericMenu.MenuFunction2 callback, params UnityEngine.GUILayoutOption[] options);
        public class DropdownItem
        {
            public UnityEngine.GUIContent Content;
            public bool Enabled;
            public UnityEngine.GUIContent SelectionContent;
            public DropdownItem() {}
        }
    }

    public class ViewDescriptor
    {
        public int analyticsEvent;
        public Unity.ProjectAuditor.Editor.IssueCategory category;
        public UnityEngine.GUIContent dependencyViewGuiContent;
        public bool descriptionWithIcon;
        public System.Func<Unity.ProjectAuditor.Editor.ProjectIssue, string> getAssemblyName;
        public bool groupByDescriptor;
        public string menuLabel;
        public int menuOrder;
        public string name;
        public System.Action<Unity.ProjectAuditor.Editor.UI.Framework.ViewManager> onDrawToolbarDataOptions;
        public System.Action<Unity.ProjectAuditor.Editor.Utils.Location> onOpenIssue;
        public System.Action<Unity.ProjectAuditor.Editor.ProblemDescriptor> onOpenManual;
        public bool showActions;
        public bool showAreaSelection;
        public bool showAssemblySelection;
        public bool showCritical;
        public bool showDependencyView;
        public bool showFilters;
        public bool showInfoPanel;
        public bool showMuteOptions;
        public bool showRightPanels;
        public bool showSeverityFilters;
        public System.Type type;
        public ViewDescriptor() {}
        public static Unity.ProjectAuditor.Editor.UI.Framework.ViewDescriptor[] GetAll();
        public static void Register(Unity.ProjectAuditor.Editor.UI.Framework.ViewDescriptor descriptor);
    }

    public class ViewManager
    {
        public System.Action<int> onViewChanged;
        public System.Action onViewExported;
        public int activeViewIndex { get; set; }
        public ViewManager(Unity.ProjectAuditor.Editor.IssueCategory[] categories) {}
        public void AddIssues(Unity.ProjectAuditor.Editor.ProjectIssue[] issues);
        public void Audit(Unity.ProjectAuditor.Editor.ProjectAuditor projectAuditor);
        public void ChangeView(int index);
        public void ChangeView(Unity.ProjectAuditor.Editor.IssueCategory category);
        public void Clear();
        public void ClearView(Unity.ProjectAuditor.Editor.IssueCategory category);
        public void Create(Unity.ProjectAuditor.Editor.ProjectAuditor projectAuditor, Unity.ProjectAuditor.Editor.UI.Framework.Preferences preferences, Unity.ProjectAuditor.Editor.IProjectIssueFilter filter, System.Action<Unity.ProjectAuditor.Editor.UI.Framework.ViewDescriptor, bool> onCreateView = default(System.Action<Unity.ProjectAuditor.Editor.UI.Framework.ViewDescriptor, bool>));
        public Unity.ProjectAuditor.Editor.UI.Framework.AnalysisView GetActiveView();
        public Unity.ProjectAuditor.Editor.UI.Framework.AnalysisView GetView(int index);
        public Unity.ProjectAuditor.Editor.UI.Framework.AnalysisView GetView(Unity.ProjectAuditor.Editor.IssueCategory category);
        public bool IsValid();
        public void SaveSettings();
    }
}
