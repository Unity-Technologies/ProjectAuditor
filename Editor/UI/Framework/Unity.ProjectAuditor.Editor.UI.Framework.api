// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.ProjectAuditor.Editor
{
    public class TextFilter : IProjectIssueFilter
    {
        public bool ignoreCase = true;
        public bool searchDependencies = false;
        public string searchString;
        public TextFilter(Core.PropertyDefinition[] propertyDefinitions = default(Core.PropertyDefinition[])) {}
        public bool Match(ProjectIssue issue);
    }
}

namespace Unity.ProjectAuditor.Editor.UI.Framework
{
    public class AnalysisView : IProjectIssueFilter
    {
        protected Draw2D m_2D;
        protected IProjectIssueFilter m_BaseFilter;
        protected ProjectAuditorConfig m_Config;
        protected ViewDescriptor m_Desc;
        protected bool m_Dirty = true;
        protected System.Collections.Generic.List<ProjectIssue> m_Issues;
        protected Unity.ProjectAuditor.Editor.Core.ProjectAuditorModule m_Module;
        protected TextFilter m_TextFilter;
        protected ViewManager m_ViewManager;
        protected ViewStates m_ViewStates;
        public ViewDescriptor desc { get; }
        protected int numIssues { get; }
        public static int toolbarButtonSize { get; }
        public AnalysisView(ViewManager viewManager) {}
        public virtual void AddIssues(System.Collections.Generic.IEnumerable<ProjectIssue> allIssues);
        public virtual void Clear();
        public virtual void Create(ViewDescriptor descriptor, Unity.ProjectAuditor.Editor.Core.IssueLayout layout, ProjectAuditorConfig config, Unity.ProjectAuditor.Editor.Core.ProjectAuditorModule module, ViewStates viewStates, IProjectIssueFilter filter);
        public virtual void DrawContent();
        public virtual void DrawFilters();
        protected virtual void DrawInfo();
        public virtual void DrawRightPanels(ProjectIssue[] selectedIssues);
        public virtual void DrawSearch();
        public static void DrawToolbarButton(UnityEngine.GUIContent guiContent, System.Action onClick);
        public void DrawTopPanel();
        protected virtual void Export(System.Func<ProjectIssue, bool> predicate = default(System.Func<ProjectIssue, bool>));
        public bool IsValid();
        public virtual void LoadSettings();
        public void MarkDirty();
        public virtual bool Match(ProjectIssue issue);
        public virtual void SaveSettings();
        public void SetSearch(string filter);
    }

    public class Draw2D
    {
        public Draw2D(string shaderName) {}
        public void ClearClipRect();
        public void DrawBox(float x, float y, float w, float h, UnityEngine.Color col);
        public void DrawBox(float x, float y, float w, float h, float r, float g, float b);
        public void DrawEnd();
        public void DrawFilledBox(float x, float y, float w, float h, UnityEngine.Color col);
        public void DrawFilledBox(float x, float y, float w, float h, float r, float g, float b);
        public void DrawLine(float x, float y, float x2, float y2, UnityEngine.Color col);
        public void DrawLine(float x, float y, float x2, float y2, float r, float g, float b);
        public bool DrawStart(UnityEngine.Rect r, Draw2D.Origin origin = Draw2D.Origin.TopLeft);
        public bool DrawStart(float w, float h, Draw2D.Origin origin = Draw2D.Origin.TopLeft, UnityEngine.GUIStyle style = default(UnityEngine.GUIStyle));
        public UnityEngine.Rect GetClipRect();
        public void OnGUI();
        public void SetClipRect(UnityEngine.Rect clipRect);
        public enum Origin
        {
            BottomLeft = 1,
            TopLeft = 0,
        }
    }

    public static class EditorUtil
    {
        public static void FocusOnAssetInProjectWindow(Location location);
        public static void OpenCodeDescriptor(Unity.ProjectAuditor.Editor.Diagnostic.Descriptor descriptor);
        public static void OpenCompilerMessageDescriptor(Unity.ProjectAuditor.Editor.Diagnostic.Descriptor descriptor);
        public static void OpenProjectSettings(Location location);
        public static void OpenTextFile<T>(Location location) where T : UnityEngine.Object;
    }

    public class MultiSelectionTable : UnityEditor.IMGUI.Controls.TreeView
    {
        public MultiSelectionTable(UnityEditor.IMGUI.Controls.TreeViewState state, UnityEditor.IMGUI.Controls.MultiColumnHeader multicolumnHeader, string[] names, TreeViewSelection selection) {}
        protected override UnityEditor.IMGUI.Controls.TreeViewItem BuildRoot();
        protected override System.Collections.Generic.IList<UnityEditor.IMGUI.Controls.TreeViewItem> BuildRows(UnityEditor.IMGUI.Controls.TreeViewItem root);
        protected override bool CanMultiSelect(UnityEditor.IMGUI.Controls.TreeViewItem item);
        public void ClearSelection();
        public static UnityEditor.IMGUI.Controls.MultiColumnHeaderState CreateDefaultMultiColumnHeaderState(MultiSelectionTable.HeaderData[] headerData);
        protected int GetChildCount(TreeItemIdentifier selectedIdentifier, out int selected);
        public TreeViewSelection GetTreeViewSelection();
        protected override void RowGUI(UnityEditor.IMGUI.Controls.TreeView.RowGUIArgs args);
        public enum Column
        {
            GroupName = 2,
            ItemName = 0,
            State = 1,
        }
        public struct HeaderData
        {
            public bool allowToggleVisibility;
            public bool autoResize;
            public UnityEngine.GUIContent content;
            public float minWidth;
            public float width;
            public HeaderData(string name, string tooltip = @"", float _width = 50f, float _minWidth = 30f, bool _autoResize = true, bool _allowToggleVisibility = true) {}
        }
        public enum SortOption
        {
            GroupName = 1,
            ItemName = 0,
        }
    }

    public class ProgressBar : IProgress
    {
        public ProgressBar() {}
        public void Advance(string description = @"");
        public void Clear();
        public void Start(string title, string description, int total);
    }

    public abstract class SelectionWindow : UnityEditor.EditorWindow
    {
        protected UnityEditor.IMGUI.Controls.MultiColumnHeaderState m_MultiColumnHeaderState;
        protected System.Action<TreeViewSelection> m_OnSelection;
        protected bool m_RequestClose;
        protected MultiSelectionTable m_SelectionTable;
        protected UnityEditor.IMGUI.Controls.TreeViewState m_TreeViewState;
        protected SelectionWindow() {}
        protected void ApplySelection();
        public static void CloseAll<T>() where T : SelectionWindow;
        protected abstract void CreateTable(TreeViewSelection selection, string[] names);
        public static bool IsOpen<T>() where T : SelectionWindow;
        public static T Open<T>(string title, float screenX, float screenY, TreeViewSelection selection, string[] names, System.Action<TreeViewSelection> onSelection) where T : SelectionWindow;
        protected void SetData(TreeViewSelection selection, string[] names, System.Action<TreeViewSelection> onSelection);
    }

    public static class SharedStyles
    {
        public static UnityEngine.GUIStyle Foldout { get; }
        public static UnityEngine.GUIStyle Label { get; }
        public static UnityEngine.GUIStyle LinkLabel { get; }
        public static UnityEngine.GUIStyle TextArea { get; }
    }

    public struct TreeItemIdentifier
    {
        public static int kAll;
        public static int kSingle = 0;
        public int index { get; }
        public string name { get; }
        public string nameWithIndex { get; }
        public TreeItemIdentifier(string _nameWithIndex) {}
        public TreeItemIdentifier(TreeItemIdentifier treeItemIdentifier) {}
        public TreeItemIdentifier(string _name, int _index) {}
        public void SetAll();
        public void SetIndex(int newIndex);
        public void SetName(string newName);
    }

    public class TreeViewSelection
    {
        public System.Collections.Generic.List<string> groups;
        public System.Collections.Generic.List<string> selection;
        public TreeViewSelection() {}
        public TreeViewSelection(TreeViewSelection selection) {}
        public bool Contains(string name);
        public bool ContainsAny(string[] names);
        public bool ContainsGroup(string groupName);
        public string[] GetSelectedStrings(string[] names, bool summarize);
        public void Set(string name);
        public void Set(TreeViewSelection selection);
        public void SetAll(string[] names);
        public void SetGroup(string groupName);
    }

    public static class Utility
    {
        public static readonly UnityEngine.GUIContent ClearSelection;
        public static readonly UnityEngine.GUIContent CopyToClipboard;
        public static readonly UnityEngine.GUIContent OpenIssue;
        public static readonly UnityEngine.GUIContent OpenScriptReference;
        public static bool BoldFoldout(bool toggle, UnityEngine.GUIContent content);
        public static void DrawHelpButton(UnityEngine.GUIContent content, string page);
        public static void DrawSelectedText(string text);
        public static UnityEngine.GUIContent GetIcon(Utility.IconType iconType, string tooltip = default(string));
        public static UnityEngine.GUIContent GetSeverityIcon(Unity.ProjectAuditor.Editor.Diagnostic.Severity severity, string tooltip = default(string));
        public static UnityEngine.GUIContent GetTextContentWithAssetIcon(string displayName, string assetPath);
        public static UnityEngine.GUIContent GetTextWithSeverityIcon(string text, string tooltip, Unity.ProjectAuditor.Editor.Diagnostic.Severity severity);
        public static string GetTreeViewSelectedSummary(TreeViewSelection selection, string[] names);
        public static void ToolbarDropdownList(Utility.DropdownItem[] items, int selectionIndex, UnityEditor.GenericMenu.MenuFunction2 callback, params UnityEngine.GUILayoutOption[] options);
        public class DropdownItem
        {
            public UnityEngine.GUIContent Content;
            public bool Enabled;
            public UnityEngine.GUIContent SelectionContent;
            public object UserData;
            public DropdownItem() {}
        }
        public enum IconType
        {
            Download = 9,
            Error = 2,
            Fix = 8,
            GreenCheckMark = 15,
            Help = 3,
            Hierarchy = 6,
            Info = 0,
            Load = 10,
            Refresh = 4,
            Save = 11,
            StatusWheel = 5,
            Trash = 12,
            View = 13,
            Warning = 1,
            WhiteCheckMark = 14,
            ZoomTool = 7,
        }
    }

    public class ViewDescriptor
    {
        public int analyticsEvent;
        public IssueCategory category;
        public UnityEngine.GUIContent dependencyViewGuiContent;
        public bool descriptionWithIcon;
        public System.Func<ProjectIssue, string> getAssemblyName;
        public string menuLabel;
        public int menuOrder;
        public string name;
        public System.Action<UnityEditor.GenericMenu, ViewManager, ProjectIssue> onContextMenu;
        public System.Action<ViewManager> onDrawToolbar;
        public System.Action<Location> onOpenIssue;
        public System.Action<Unity.ProjectAuditor.Editor.Diagnostic.Descriptor> onOpenManual;
        public bool showActions;
        public bool showAreaSelection;
        public bool showAssemblySelection;
        public bool showCritical;
        public bool showDependencyView;
        public bool showFilters;
        public bool showInfoPanel;
        public bool showMuteOptions;
        public bool showRightPanels;
        public bool showSeverityFilters;
        public System.Type type;
        public ViewDescriptor() {}
        public static ViewDescriptor[] GetAll();
        public static bool Register(ViewDescriptor descriptor);
    }

    public sealed class ViewManager
    {
        public System.Action<Unity.ProjectAuditor.Editor.Core.ProjectAuditorModule> onAnalyze;
        public System.Action<int> onViewChanged;
        public System.Action onViewExported;
        public int activeViewIndex { get; }
        public ViewManager(IssueCategory[] categories) {}
        public void AddIssues(System.Collections.Generic.IReadOnlyCollection<ProjectIssue> issues);
        public void ChangeView(IssueCategory category);
        public void Clear();
        public void ClearView(IssueCategory category);
        public void Create(ProjectAuditor projectAuditor, ViewStates viewStates, System.Action<ViewDescriptor, bool> onCreateView = default(System.Action<ViewDescriptor, bool>), IProjectIssueFilter filter = default(IProjectIssueFilter));
        public AnalysisView GetActiveView();
        public AnalysisView GetView(int index);
        public AnalysisView GetView(IssueCategory category);
        public bool HasView(IssueCategory category);
        public bool IsValid();
        public void LoadSettings();
        public void MarkViewsAsDirty();
        public void SaveSettings();
    }

    public class ViewStates
    {
        public bool actions = true;
        public bool dependencies = true;
        public bool details = true;
        public bool filters = true;
        public int fontSize = 12;
        public bool info = true;
        public const int k_MaxFontSize = 22;
        public const int k_MinFontSize = 12;
        public bool mutedIssues;
        public bool onlyCriticalIssues;
        public bool recommendation = true;
        public ViewStates() {}
    }
}
