// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.ProjectAuditor.Editor.Tests.Common
{
    public class TestAsset
    {
        public readonly string relativePath;
        public static readonly string TempAssetsFolder;
        public string fileName { get; }
        public TestAsset(string fileName, byte[] byteContent) {}
        public TestAsset(string fileName, string content) {}
        public static void Cleanup();
        public void CleanupLocal();
        public static void CreateTempFolder();
        public static TestAsset Save(UnityEngine.Object asset, string fileName);
        public static TestAsset SaveSpriteAtlasAsset(UnityEditor.U2D.SpriteAtlasAsset asset, string fileName);
    }

    public abstract class TestFixtureBase
    {
        protected System.Collections.Generic.List<Unity.ProjectAuditor.Editor.Diagnostic.Rule> m_AdditionalRules;
        protected AnalysisParams m_AnalysisParams;
        protected string m_AssemblyName;
        protected string m_BuildPath;
        protected ProjectIssue[] m_CodeDiagnostics;
        protected CodeOptimization m_CodeOptimization = CodeOptimization.Release;
        protected string m_OriginalCompanyName;
        protected string m_OriginalProductName;
        protected UnityEditor.AndroidArchitecture m_OriginalTargetArchitecture;
        protected UnityEditor.BuildTarget m_Platform;
        protected ProjectAuditor m_ProjectAuditor;
        protected TestFixtureBase() {}
        protected ProjectIssue[] Analyze(System.Func<ProjectIssue, bool> predicate = default(System.Func<ProjectIssue, bool>));
        protected ProjectIssue[] Analyze(IssueCategory category, System.Func<ProjectIssue, bool> predicate = default(System.Func<ProjectIssue, bool>));
        protected ProjectIssue[] AnalyzeAndFindAssetIssues(TestAsset testAsset, IssueCategory category = IssueCategory.Code);
        protected ProjectIssue[] AnalyzeBuild(System.Func<ProjectIssue, bool> predicate = default(System.Func<ProjectIssue, bool>), bool isDevelopment = true, string buildFileName = @"test", System.Action preBuildAction = default(System.Action), System.Action postBuildAction = default(System.Action));
        protected ProjectIssue[] AnalyzeBuild(IssueCategory category, System.Func<ProjectIssue, bool> predicate = default(System.Func<ProjectIssue, bool>), bool isDevelopment = true, string buildFileName = @"test", System.Action preBuildAction = default(System.Action), System.Action postBuildAction = default(System.Action));
        protected ProjectIssue[] AnalyzeFiltered(System.Predicate<string> filterPredicate);
        protected ProjectIssue[] AnalyzeFiltered(System.Predicate<string> filterPredicate, IssueCategory category);
        protected ProjectIssue[] AnalyzeFiltered(System.Predicate<string> filterPredicate, IssueCategory[] categories);
        protected void AnalyzeTempAssetsFolder();
        protected void Build(bool isDevelopment = true, string buildFileName = @"test", System.Action preBuildAction = default(System.Action), System.Action postBuildAction = default(System.Action));
        protected void CleanupBuild();
        protected ProjectIssue[] FindTestAssetIssues(TestAsset testAsset);
        [NUnit.Framework.OneTimeSetUp] public void FixtureSetUp();
        [NUnit.Framework.OneTimeTearDown] public void FixtureTearDown();
        public static UnityEditor.BuildTarget GetStandaloneBuildTarget();
        protected void ValidateTargetPlatform();
    }
}
