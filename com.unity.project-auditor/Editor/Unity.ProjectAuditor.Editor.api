// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.ProjectAuditor.Editor
{
    public class AnalysisParams
    {
        public string[] AssemblyNames;
        [UnityEngine.SerializeField] public IssueCategory[] Categories;
        public CodeOptimization CodeOptimization = CodeOptimization.Release;
        public CompilationMode CompilationMode = CompilationMode.Player;
        public DiagnosticParams DiagnosticParams;
        [Newtonsoft.Json.JsonIgnore] public System.Action<ProjectReport> OnCompleted;
        [Newtonsoft.Json.JsonIgnore] public System.Action<System.Collections.Generic.IEnumerable<ProjectIssue>> OnIncomingIssues;
        [Newtonsoft.Json.JsonIgnore] public System.Action<AnalysisResult> OnModuleCompleted;
        [Newtonsoft.Json.JsonConverter(typeof(Diagnostic.BuildTargetJsonConverter))] public UnityEditor.BuildTarget Platform { get; set; }
        public AnalysisParams(bool copyParamsFromGlobal = true) {}
        public AnalysisParams(AnalysisParams original) {}
        public AnalysisParams WithAdditionalDiagnosticRules(System.Collections.Generic.List<Diagnostic.Rule> rules);
    }

    public enum AnalysisResult
    {
        Cancelled = 3,
        Failure = 2,
        InProgress = 0,
        Success = 1,
    }

    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] public enum CodeOptimization
    {
        Debug = 0,
        Release = 1,
    }

    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] public enum CompilationMode
    {
        DevelopmentPlayer = 1,
        Editor = 3,
        EditorPlayMode = 2,
        Player = 0,
    }

    public sealed class DiagnosticParams : UnityEngine.ISerializationCallbackReceiver
    {
        public DiagnosticParams() {}
        public DiagnosticParams(DiagnosticParams copyFrom) {}
        public int GetParameter(string paramName);
        public void OnAfterDeserialize();
        public void OnBeforeSerialize();
        public void RegisterParameter(string paramName, int defaultValue);
        public void SetAnalysisPlatform(UnityEditor.BuildTarget platform);
        public void SetParameter(string paramName, int value, UnityEditor.BuildTarget platform = UnityEditor.BuildTarget.NoTarget);
    }

    public interface IProgress
    {
        public bool IsCancelled { get; }
        public void Advance(string description = @"");
        public void Clear();
        public void Start(string title, string description, int total);
    }

    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] public enum IssueCategory
    {
        AnimationClip = 23,
        AnimatorController = 22,
        Assembly = 11,
        AssetIssue = 1,
        AudioClip = 17,
        Avatar = 24,
        AvatarMask = 25,
        BuildFile = 8,
        BuildStep = 9,
        BuildSummary = 10,
        Code = 4,
        CodeCompilerMessage = 5,
        ComputeShaderVariant = 18,
        DomainReload = 26,
        FirstCustomCategory = 27,
        GenericInstance = 6,
        Material = 21,
        Mesh = 19,
        Metadata = 0,
        Package = 14,
        PackageDiagnostic = 15,
        PrecompiledAssembly = 12,
        ProjectSetting = 7,
        Shader = 2,
        ShaderCompilerMessage = 13,
        ShaderVariant = 3,
        SpriteAtlas = 20,
        Texture = 16,
    }

    public class Location
    {
        [Newtonsoft.Json.JsonIgnore] public string Extension { get; }
        [Newtonsoft.Json.JsonIgnore] public string Filename { get; }
        [Newtonsoft.Json.JsonIgnore] public string FormattedFilename { get; }
        [Newtonsoft.Json.JsonIgnore] public string FormattedPath { get; }
        public bool IsValid { get; }
        [Newtonsoft.Json.JsonProperty(@"line", DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore)] public int Line { get; }
        [Newtonsoft.Json.JsonIgnore] public string Path { get; }
        public Location(string path) {}
        [Newtonsoft.Json.JsonConstructor] public Location(string path, int line) {}
    }

    public enum LogLevel
    {
        Error = 0,
        Info = 2,
        Warning = 1,
    }

    public sealed class ProjectAuditor : UnityEditor.Build.IOrderedCallback, UnityEditor.Build.IPostprocessBuildWithReport
    {
        public const string DisplayName = @"Project Auditor";
        public int callbackOrder { get; }
        public ProjectAuditor() {}
        public ProjectReport Audit(IProgress progress = default(IProgress));
        public ProjectReport Audit(AnalysisParams analysisParams, IProgress progress = default(IProgress));
        public void AuditAsync(AnalysisParams analysisParams, IProgress progress = default(IProgress));
        public void OnPostprocessBuild(UnityEditor.Build.Reporting.BuildReport report);
    }

    [UnityEditor.FilePath(@"ProjectSettings/ProjectAuditorSettings.asset", UnityEditor.FilePathAttribute.Location.ProjectFolder)] public class ProjectAuditorSettings : UnityEditor.ScriptableSingleton<ProjectAuditorSettings>
    {
        public void Save();
    }

    public class ProjectIssue
    {
        [Newtonsoft.Json.JsonProperty(@"category")] public IssueCategory Category { get; }
        [Newtonsoft.Json.JsonProperty(@"properties")] public string[] CustomProperties { get; }
        [Newtonsoft.Json.JsonProperty(@"description")] public string Description { get; }
        [Newtonsoft.Json.JsonIgnore] public string Filename { get; }
        [Newtonsoft.Json.JsonIgnore] public Diagnostic.DescriptorId Id { get; }
        [Newtonsoft.Json.JsonIgnore] public int Line { get; }
        [Newtonsoft.Json.JsonProperty(@"location")] public Location Location { get; }
        [Newtonsoft.Json.JsonIgnore] public LogLevel LogLevel { get; }
        [Newtonsoft.Json.JsonIgnore] public string RelativePath { get; }
        [Newtonsoft.Json.JsonIgnore] public Diagnostic.Severity Severity { get; }
        public string GetCustomProperty<T>(T propertyEnum) where T : struct, new();
        public bool GetCustomPropertyBool<T>(T propertyEnum) where T : struct, new();
        public double GetCustomPropertyDouble<T>(T propertyEnum) where T : struct, new();
        public float GetCustomPropertyFloat<T>(T propertyEnum) where T : struct, new();
        public int GetCustomPropertyInt32<T>(T propertyEnum) where T : struct, new();
        public long GetCustomPropertyInt64<T>(T propertyEnum) where T : struct, new();
        public System.UInt64 GetCustomPropertyUInt64<T>(T propertyEnum) where T : struct, new();
        public int GetNumCustomProperties();
        public bool IsDiagnostic();
        public bool IsMajorOrCritical();
        public bool IsValid();
        public void SetCustomProperty<T>(T propertyEnum, object property) where T : struct, new();
    }

    public sealed class ProjectReport
    {
        [Newtonsoft.Json.JsonProperty(@"sessionInfo")] [UnityEngine.SerializeField] public SessionInfo SessionInfo;
        [Newtonsoft.Json.JsonIgnore] public int NumTotalIssues { get; }
        [Newtonsoft.Json.JsonIgnore] public string Version { get; }
        public void ClearIssues(IssueCategory Category);
        public System.Collections.Generic.IReadOnlyCollection<ProjectIssue> FindByCategory(IssueCategory category);
        public System.Collections.Generic.IReadOnlyCollection<ProjectIssue> FindByDescriptorId(string id);
        public System.Collections.Generic.IReadOnlyCollection<ProjectIssue> GetAllIssues();
        public int GetNumIssues(IssueCategory category);
        public bool HasCategory(IssueCategory category);
        public bool IsValid();
        public static ProjectReport Load(string path);
        public void Save(string path);
    }

    public class SessionInfo : AnalysisParams
    {
        public string CompanyName;
        public string DateTime;
        public string HostName;
        public string HostPlatform;
        public string ProjectAuditorVersion;
        public string ProjectId;
        public string ProjectName;
        public string ProjectRevision;
        public string UnityVersion;
        public bool UseRoslynAnalyzers;
        public SessionInfo() {}
        public SessionInfo(AnalysisParams serializedParams) {}
    }
}

namespace Unity.ProjectAuditor.Editor.Diagnostic
{
    [Newtonsoft.Json.JsonConverter(typeof(AreasJsonConverter))] [System.Flags] public enum Areas
    {
        All = 1023,
        BuildSize = 1,
        BuildTime = 2,
        CPU = 4,
        GPU = 8,
        IterationTime = 16,
        LoadTime = 32,
        Memory = 64,
        None = 0,
        Quality = 128,
        Requirement = 256,
        Support = 512,
    }

    public class BuildTargetJsonConverter : Newtonsoft.Json.JsonConverter
    {
        public BuildTargetJsonConverter() {}
        public override bool CanConvert(System.Type objectType);
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer);
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer);
    }

    public sealed class Descriptor : System.IEquatable<Descriptor>
    {
        public Areas Areas;
        public Severity DefaultSeverity;
        public string Description;
        public string DocumentationUrl;
        [Newtonsoft.Json.JsonIgnore] public System.Action<ProjectIssue, AnalysisParams> fixer;
        public string Id;
        public bool IsEnabledByDefault = true;
        public string MaximumVersion;
        public string MessageFormat;
        public string Method;
        public string MinimumVersion;
        [Newtonsoft.Json.JsonConverter(typeof(BuildTargetJsonConverter))] public UnityEditor.BuildTarget[] Platforms;
        public string Solution;
        public string Title;
        public string Type;
        public string Value;
        public Descriptor(string id, string title, Areas areas, string description, string solution) {}
        public override bool Equals(object obj);
        public bool Equals(Descriptor other);
        public override int GetHashCode();
    }

    public struct DescriptorId : System.IEquatable<DescriptorId>
    {
        public DescriptorId(string id) {}
        public int AsInt();
        public string AsString();
        public bool Equals(string other);
        public bool Equals(DescriptorId other);
        public Descriptor GetDescriptor();
        public bool IsValid();
        public static int op_Implicit(DescriptorId d);
        public static string op_Implicit(DescriptorId d);
        public static DescriptorId op_Implicit(string id);
        public override string ToString();
    }

    public class DescriptorJsonConverter : Newtonsoft.Json.JsonConverter
    {
        public DescriptorJsonConverter() {}
        public override bool CanConvert(System.Type objectType);
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer);
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer);
    }

    public class Rule
    {
        [Newtonsoft.Json.JsonProperty(@"filter")] public string Filter;
        [Newtonsoft.Json.JsonIgnore] public DescriptorId Id;
        [Newtonsoft.Json.JsonProperty(@"severity")] public Severity Severity;
        public Rule() {}
        public override int GetHashCode();
    }

    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] public enum Severity
    {
        Critical = 2,
        Default = 0,
        Error = 1,
        Hidden = 7,
        Info = 5,
        Major = 3,
        Minor = 5,
        Moderate = 4,
        None = 6,
        Warning = 4,
    }
}
